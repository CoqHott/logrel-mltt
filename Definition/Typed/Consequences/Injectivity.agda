{-# OPTIONS --without-K  #-}

module Definition.Typed.Consequences.Injectivity where

open import Definition.Untyped hiding (wk)
import Definition.Untyped as U
open import Definition.Untyped.Properties

open import Definition.Typed
open import Definition.Typed.Weakening
open import Definition.Typed.Properties
open import Definition.Typed.EqRelInstance
open import Definition.LogicalRelation
open import Definition.LogicalRelation.Irrelevance
open import Definition.LogicalRelation.ShapeView
open import Definition.LogicalRelation.Properties
open import Definition.LogicalRelation.Fundamental.Reducibility

open import Tools.Product
import Tools.PropositionalEquality as PE


-- Helper function of injectivity for specific reducible Œ†-types
injectivity‚Ä≤ : ‚àÄ {F G H E sF sH sG Œì l}
               ([Œ†FG] : Œì ‚ä©‚ü® l ‚ü©Œ† Œ† F ‚¶Ç sF ‚ñπ G ‚¶Ç sG)
             ‚Üí Œì ‚ä©‚ü® l ‚ü© Œ† F ‚¶Ç sF ‚ñπ G ‚â° Œ† H ‚¶Ç sH ‚ñπ E ‚¶Ç sG / Œ†-intr [Œ†FG]
             ‚Üí Œì ‚ä¢ F ‚â° H ‚¶Ç sF
             √ó sF PE.‚â° sH
             √ó Œì ‚àô F ‚¶Ç sF ‚ä¢ G ‚â° E ‚¶Ç sG
injectivity‚Ä≤ (noemb (Œ†·µ£ sF‚Ä≤ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext))
         (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  let F‚â°F‚ÇÅ , sF‚â°sF‚ÇÅ , G‚â°G‚ÇÅ = Œ†-PE-injectivity (whnfRed* (red D) Œ†‚Çô)
      H‚â°F‚Ä≤ , sH‚â°sF‚Ä≤ , E‚â°G‚Ä≤ = Œ†-PE-injectivity (whnfRed* D‚Ä≤ Œ†‚Çô)
      ‚ä¢Œì = wf ‚ä¢F
      [F]‚ÇÅ = [F] id ‚ä¢Œì
      [F]‚Ä≤ = irrelevance‚Ä≤ (PE.trans (wk-id _) (PE.sym F‚â°F‚ÇÅ)) [F]‚ÇÅ
      [x‚à∑F] = neuTerm ([F] (step id) (‚ä¢Œì ‚àô ‚ä¢F)) (var 0) (var (‚ä¢Œì ‚àô ‚ä¢F) here)
                      (refl (var (‚ä¢Œì ‚àô ‚ä¢F) here))
      [G]‚ÇÅ = [G] (step id) (‚ä¢Œì ‚àô ‚ä¢F) [x‚à∑F]
      [G]‚Ä≤ = PE.subst‚ÇÇ (Œª x y ‚Üí _ ‚àô y ‚¶Ç _ ‚ä©‚ü® _ ‚ü© x ‚¶Ç _)
                       (PE.trans (wkSingleSubstId _) (PE.sym G‚â°G‚ÇÅ))
                       (PE.sym F‚â°F‚ÇÅ) [G]‚ÇÅ
      [F‚â°H]‚ÇÅ = [F‚â°F‚Ä≤] id ‚ä¢Œì
      [F‚â°H]‚Ä≤ = irrelevanceEq‚Ä≥ (PE.trans (wk-id _) (PE.sym F‚â°F‚ÇÅ))
                               (PE.trans (wk-id _) (PE.sym H‚â°F‚Ä≤))
                               [F]‚ÇÅ [F]‚Ä≤ [F‚â°H]‚ÇÅ
      [G‚â°E]‚ÇÅ = [G‚â°G‚Ä≤] (step id) (‚ä¢Œì ‚àô ‚ä¢F) [x‚à∑F]
      [G‚â°E]‚Ä≤ = irrelevanceEqLift‚Ä≥ (PE.trans (wkSingleSubstId _) (PE.sym G‚â°G‚ÇÅ))
                                   (PE.trans (wkSingleSubstId _) (PE.sym E‚â°G‚Ä≤))
                                   (PE.sym F‚â°F‚ÇÅ) [G]‚ÇÅ [G]‚Ä≤ [G‚â°E]‚ÇÅ
  in  PE.subst _ (PE.sym sF‚â°sF‚ÇÅ) (escapeEq [F]‚Ä≤ [F‚â°H]‚Ä≤)
    , PE.trans sF‚â°sF‚ÇÅ (PE.sym sH‚â°sF‚Ä≤)
    , PE.subst _ (PE.sym sF‚â°sF‚ÇÅ) (escapeEq [G]‚Ä≤ [G‚â°E]‚Ä≤)
injectivity‚Ä≤ (emb 0<1 x) [Œ†FG‚â°Œ†HE] = injectivity‚Ä≤ x [Œ†FG‚â°Œ†HE]

-- Injectivity of Œ†
injectivity : ‚àÄ {Œì F G H E sF sH sG} ‚Üí Œì ‚ä¢ Œ† F ‚¶Ç sF ‚ñπ G ‚â° Œ† H ‚¶Ç sH ‚ñπ E ‚¶Ç sG
            ‚Üí Œì ‚ä¢ F ‚â° H ‚¶Ç sF
            √ó sF PE.‚â° sH
            √ó Œì ‚àô F ‚¶Ç sF ‚ä¢ G ‚â° E ‚¶Ç sG
injectivity ‚ä¢Œ†FG‚â°Œ†HE =
  let [Œ†FG] , _ , [Œ†FG‚â°Œ†HE] = reducibleEq ‚ä¢Œ†FG‚â°Œ†HE
  in  injectivity‚Ä≤ (Œ†-elim [Œ†FG])
                   (irrelevanceEq [Œ†FG] (Œ†-intr (Œ†-elim [Œ†FG])) [Œ†FG‚â°Œ†HE])

Uinjectivity‚Ä≤ : ‚àÄ {Œì s‚ÇÅ s‚ÇÇ l}
               ([U] : Œì ‚ä©‚ü® l ‚ü©U)
             ‚Üí Œì ‚ä©‚ü® l ‚ü© Univ s‚ÇÅ ‚â° Univ s‚ÇÇ ‚¶Ç ùï•y / U-intr [U]
             ‚Üí s‚ÇÅ PE.‚â° s‚ÇÇ
Uinjectivity‚Ä≤ (noemb x) PE.refl = PE.refl -- probably more complicated if we had large univs
Uinjectivity‚Ä≤ (emb 0<1 a) b = Uinjectivity‚Ä≤ a b

Uinjectivity : ‚àÄ {Œì s‚ÇÅ s‚ÇÇ} ‚Üí Œì ‚ä¢ Univ s‚ÇÅ ‚â° Univ s‚ÇÇ ‚¶Ç ùï•y ‚Üí s‚ÇÅ PE.‚â° s‚ÇÇ
Uinjectivity ‚ä¢U‚â°U =
  let [U] , _ , [U‚â°U] = reducibleEq ‚ä¢U‚â°U
  in Uinjectivity‚Ä≤ (U-elim [U]) (irrelevanceEq [U] (U-intr (U-elim [U])) [U‚â°U])
