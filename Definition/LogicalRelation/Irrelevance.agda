{-# OPTIONS --without-K  #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Irrelevance {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped
open import Definition.Typed
open import Definition.Typed.Properties
open import Definition.LogicalRelation
open import Definition.LogicalRelation.ShapeView

open import Tools.Product
import Tools.PropositionalEquality as PE

-- []-cstr-PE : ‚àÄ {K K' t} (K‚â°K' : K PE.‚â° K') (d : [ K ]-cstr t) ‚Üí [ K' ]-cstr t
-- []-cstr-PE PE.refl d = d

Cstr-prop-ext : ‚àÄ {K K' Œì Pi Pi' t a} (K‚â°K' : K PE.‚â° K') (Pi‚ÜíPi' : ‚àÄ ki kiK  kiK' t ‚Üí Pi ki kiK t ‚Üí Pi' ki kiK' t) (d : Cstr-prop K Œì Pi t a) ‚Üí Cstr-prop K' Œì Pi' t a
Cstr-prop-ext PE.refl Pi‚ÜíPi' (cstr·µ£ kK x) = cstr·µ£ kK (Pi‚ÜíPi' _ kK kK _ x)
Cstr-prop-ext PE.refl Pi‚ÜíPi' (ne x) = ne x

[Cstr]-prop-ext : ‚àÄ {K K' Œì Pi Pi' t t' a} (K‚â°K' : K PE.‚â° K') (Pi‚ÜíPi' : ‚àÄ ki kiK  kiK' t t' ‚Üí Pi ki kiK t t' ‚Üí Pi' ki kiK' t t') (d : [Cstr]-prop K Œì Pi t t' a) ‚Üí [Cstr]-prop K' Œì Pi' t t' a
[Cstr]-prop-ext PE.refl Pi‚ÜíPi' (cstr·µ£ kK x) = cstr·µ£ kK (Pi‚ÜíPi' _ kK kK _ _ x)
[Cstr]-prop-ext PE.refl Pi‚ÜíPi' (ne x) = ne x

-- Irrelevance for propositionally equal types
irrelevance‚Ä≤ : ‚àÄ {A A‚Ä≤ Œì s l}
             ‚Üí A PE.‚â° A‚Ä≤
             ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s
             ‚Üí Œì ‚ä©‚ü® l ‚ü© A‚Ä≤ ‚¶Ç s
irrelevance‚Ä≤ PE.refl [A] = [A]

-- Irrelevance for propositionally equal types and contexts
irrelevanceŒì‚Ä≤ : ‚àÄ {l A A‚Ä≤ s Œì Œì‚Ä≤}
              ‚Üí Œì PE.‚â° Œì‚Ä≤
              ‚Üí A PE.‚â° A‚Ä≤
              ‚Üí Œì  ‚ä©‚ü® l ‚ü© A ‚¶Ç s
              ‚Üí Œì‚Ä≤ ‚ä©‚ü® l ‚ü© A‚Ä≤ ‚¶Ç s
irrelevanceŒì‚Ä≤ PE.refl PE.refl [A] = [A]

-- NB: for Pi cases it seems like it would be cleaner to do
-- irrelevanceFoo (Pi ...) rewrite whrDet* ...
-- instead of messing with PE.subst and irrelevanceEq‚Ä≤ etc
-- however for some reason the termination checker doesn't accept it

mutual
  -- Irrelevance for type equality
  irrelevanceEq : ‚àÄ {Œì A B s l l‚Ä≤} (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s)
                ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚¶Ç s / q
  irrelevanceEq p q A‚â°B = irrelevanceEqT (goodCasesRefl p q) A‚â°B

  -- Irrelevance for type equality with propositionally equal first types
  irrelevanceEq‚Ä≤ : ‚àÄ {Œì A A‚Ä≤ B s s' l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤) (eqr : s PE.‚â° s')
                   (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s')
                 ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B ‚¶Ç s' / q
  irrelevanceEq‚Ä≤ PE.refl PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Irrelevance for type equality with propositionally equal types
  irrelevanceEq‚Ä≥ : ‚àÄ {Œì A A‚Ä≤ B B‚Ä≤ s l l‚Ä≤} (eqA : A PE.‚â° A‚Ä≤) (eqB : B PE.‚â° B‚Ä≤)
                    (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B‚Ä≤ ‚¶Ç s / q
  irrelevanceEq‚Ä≥ PE.refl PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Irrelevance for type equality with propositionally equal second types
  irrelevanceEqR‚Ä≤ : ‚àÄ {Œì A B B‚Ä≤ s l} (eqB : B PE.‚â° B‚Ä≤) (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B‚Ä≤ ‚¶Ç s / p
  irrelevanceEqR‚Ä≤ PE.refl p A‚â°B = A‚â°B

  -- Irrelevance for type equality with propositionally equal types and
  -- a lifting of propositionally equal types
  irrelevanceEqLift‚Ä≥ : ‚àÄ {Œì A A‚Ä≤ B B‚Ä≤ C C‚Ä≤ sC s l l‚Ä≤}
                        (eqA : A PE.‚â° A‚Ä≤) (eqB : B PE.‚â° B‚Ä≤) (eqC : C PE.‚â° C‚Ä≤)
                        (p : Œì ‚àô C ‚¶Ç sC ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚àô C‚Ä≤ ‚¶Ç sC ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s)
                      ‚Üí Œì ‚àô C ‚¶Ç sC ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / p ‚Üí Œì ‚àô C‚Ä≤ ‚¶Ç sC ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B‚Ä≤ ‚¶Ç s / q
  irrelevanceEqLift‚Ä≥ PE.refl PE.refl PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Helper for irrelevance of type equality using shape view
  irrelevanceEqT : ‚àÄ {Œì A B s l l‚Ä≤} {p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s}
                       ‚Üí ShapeView Œì l l‚Ä≤ A A s s p q
                       ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚¶Ç s / q
  irrelevanceEqT (‚Ñï·µ• D D‚Ä≤) A‚â°B = A‚â°B
  irrelevanceEqT (Empty·µ• D D‚Ä≤) A‚â°B = A‚â°B
  irrelevanceEqT (ne (ne K D neK _) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
                 rewrite whrDet* (red D , ne neK) (red D‚ÇÅ , ne neK‚ÇÅ) =
    ne‚Çå M D‚Ä≤ neM K‚â°M
  irrelevanceEqT {Œì} {s = s} {l‚Ä≤ = l‚Ä≤} (cstr·µ• (cstr·µ£ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
                        (cstr·µ£ K‚ÇÅ _ _ D‚ÇÅ _ _ [domK]‚ÇÅ [a]‚ÇÅ [Yi]‚ÇÅ))
                 (cstr‚Çå a' D' A‚â°B [a‚â°a']) =
    let Ka‚â°K‚ÇÅa‚ÇÅ = whrDet* (red D , cstr‚Çô) (red D‚ÇÅ , cstr‚Çô)
        K‚â°K‚ÇÅ    = cstr-app-PE-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
        a‚â°a‚ÇÅ    = cstr-app-PE-arg-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
    in
    cstr‚Çå a' (PE.subst (Œª x ‚Üí _ ‚ä¢ _ :‚áí*: cstr x ‚àò a' ‚¶Ç _) K‚â°K‚ÇÅ D')
             (PE.subst‚ÇÇ (Œª x y ‚Üí Œì ‚ä¢ x ‚âÖ cstr y ‚àò a' ‚¶Ç s) Ka‚â°K‚ÇÅa‚ÇÅ K‚â°K‚ÇÅ A‚â°B)
             (PE.subst (Œª x ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© x ‚â° a' ‚à∑ _ ‚¶Ç ùï•y / [domK]‚ÇÅ) a‚â°a‚ÇÅ
                       (irrelevanceEqTerm‚Ä≤ (PE.cong (Œª x ‚Üí wkAll Œì (cstr-dom x)) K‚â°K‚ÇÅ) PE.refl [domK] [domK]‚ÇÅ [a‚â°a']) )
  irrelevanceEqT {Œì} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                         (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
                 (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
    let Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ   = whrDet* (red D , Œ†‚Çô) (red D‚ÇÅ , Œ†‚Çô)
        F‚â°F‚ÇÅ , sF‚â°sF‚ÇÅ , G‚â°G‚ÇÅ = Œ†-PE-injectivity Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ
    in  Œ†‚Çå F‚Ä≤ G‚Ä≤ (PE.subst _ sF‚â°sF‚ÇÅ D‚Ä≤)
    (PE.subst‚ÇÇ (Œª x sx ‚Üí Œì ‚ä¢ x ‚âÖ Œ† F‚Ä≤ ‚¶Ç sx ‚ñπ G‚Ä≤ ‚¶Ç s) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ sF‚â°sF‚ÇÅ A‚â°B)
           (Œª {œÅ} [œÅ] ‚ä¢Œî ‚Üí irrelevanceEq‚Ä≤ (PE.cong (wk œÅ) F‚â°F‚ÇÅ) sF‚â°sF‚ÇÅ ([F] [œÅ] ‚ä¢Œî)
                                          ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                          ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî))
           (Œª {œÅ} [œÅ] ‚ä¢Œî [a]‚ÇÅ ‚Üí
              let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ)) (PE.sym sF‚â°sF‚ÇÅ)
                                         ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                         ([F] [œÅ] ‚ä¢Œî)
                                         [a]‚ÇÅ
              in  irrelevanceEq‚Ä≤ (PE.cong (Œª y ‚Üí wk (lift œÅ) y [ _ ]) G‚â°G‚ÇÅ) PE.refl
                                 ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]))
  irrelevanceEqT (U·µ• (U·µ£ _ _ _) (U·µ£ _ _ _)) A‚â°B = A‚â°B
  irrelevanceEqT (emb‚Å∞¬π x) A‚â°B = irrelevanceEqT x A‚â°B
  irrelevanceEqT (emb¬π‚Å∞ x) A‚â°B = irrelevanceEqT x A‚â°B

--------------------------------------------------------------------------------

  -- Irrelevance for terms
  irrelevanceTerm : ‚àÄ {Œì A t s l l‚Ä≤} (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚¶Ç s / q
  irrelevanceTerm p q t = irrelevanceTermT (goodCasesRefl p q) t

  -- Irrelevance for terms with propositionally equal types
  irrelevanceTerm‚Ä≤ : ‚àÄ {Œì A A‚Ä≤ t s s' l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤) (req : s PE.‚â° s')
                     (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s')
                   ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A‚Ä≤ ‚¶Ç s' / q
  irrelevanceTerm‚Ä≤ PE.refl PE.refl p q t = irrelevanceTerm p q t

  -- Irrelevance for terms with propositionally equal types and terms
  irrelevanceTerm‚Ä≥ : ‚àÄ {Œì A A‚Ä≤ t t‚Ä≤ s l l‚Ä≤}
                      (eqA : A PE.‚â° A‚Ä≤) (eqt : t PE.‚â° t‚Ä≤)
                      (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s)
                    ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ A‚Ä≤ ‚¶Ç s / q
  irrelevanceTerm‚Ä≥ PE.refl PE.refl p q t = irrelevanceTerm p q t

  -- Irrelevance for terms with propositionally equal types, terms and contexts
  irrelevanceTermŒì‚Ä≥ : ‚àÄ {l l‚Ä≤ A A‚Ä≤ t t‚Ä≤ s Œì Œì‚Ä≤}
                     ‚Üí Œì PE.‚â° Œì‚Ä≤
                     ‚Üí A PE.‚â° A‚Ä≤
                     ‚Üí t PE.‚â° t‚Ä≤
                     ‚Üí ([A]  : Œì  ‚ä©‚ü® l  ‚ü© A ‚¶Ç s)
                       ([A‚Ä≤] : Œì‚Ä≤ ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s)
                     ‚Üí Œì  ‚ä©‚ü® l  ‚ü© t ‚à∑ A ‚¶Ç s / [A]
                     ‚Üí Œì‚Ä≤ ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ A‚Ä≤ ‚¶Ç s / [A‚Ä≤]
  irrelevanceTermŒì‚Ä≥ PE.refl PE.refl PE.refl [A] [A‚Ä≤] [t] = irrelevanceTerm [A] [A‚Ä≤] [t]

  -- Helper for irrelevance of terms using shape view
  irrelevanceTermT : ‚àÄ {Œì A t s l l‚Ä≤} {p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s}
                         ‚Üí ShapeView Œì l l‚Ä≤ A A s s p q
                         ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚¶Ç s / q
  irrelevanceTermT (‚Ñï·µ• D D‚Ä≤) t = t
  irrelevanceTermT (Empty·µ• D D‚Ä≤) t = t
  irrelevanceTermT (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú k d nf)
                   with whrDet* (red D‚ÇÅ , ne neK‚ÇÅ) (red D , ne neK)
  irrelevanceTermT (ne (ne K D neK K‚â°K) (ne .K D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú k d nf)
    | PE.refl = ne‚Çú k d nf

  irrelevanceTermT {Œì} {t = t} {s = s}
                   (cstr·µ• (cstr·µ£ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
                          (cstr·µ£ K‚ÇÅ _ _ D‚ÇÅ _ _ [domK]‚ÇÅ [a]‚ÇÅ [Yi]‚ÇÅ))
                   (cstr‚Çú k d k‚â°k [k]) =
    let Ka‚â°K‚ÇÅa‚ÇÅ = whrDet* (red D , cstr‚Çô) (red D‚ÇÅ , cstr‚Çô)
        K‚â°K‚ÇÅ    = cstr-app-PE-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
        a‚â°a‚ÇÅ    = cstr-app-PE-arg-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
    in
    cstr‚Çú k
         (PE.subst (Œª x ‚Üí Œì ‚ä¢ t :‚áí*: k ‚à∑ x ‚¶Ç s) Ka‚â°K‚ÇÅa‚ÇÅ d)
         (PE.subst (Œª x ‚Üí Œì ‚ä¢ k ‚âÖ k ‚à∑ x ‚¶Ç s) Ka‚â°K‚ÇÅa‚ÇÅ k‚â°k)
         (PE.subst (Cstr-prop K‚ÇÅ Œì _ k) a‚â°a‚ÇÅ
                   (Cstr-prop-ext K‚â°K‚ÇÅ (Œª ki kiK kiK' t d ‚Üí irrelevanceTerm ([Yi] ki kiK) ([Yi]‚ÇÅ ki kiK') d) [k]))
  irrelevanceTermT {Œì} {t = t} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                                   (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
                   (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
    let Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ   = whrDet* (red D , Œ†‚Çô) (red D‚ÇÅ , Œ†‚Çô)
        F‚â°F‚ÇÅ , sF‚â°sF‚ÇÅ , G‚â°G‚ÇÅ = Œ†-PE-injectivity Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ
    in  Œ†‚Çú f (PE.subst (Œª x ‚Üí Œì ‚ä¢ t :‚áí*: f ‚à∑ x ‚¶Ç s) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ d) funcF
           (PE.subst (Œª x ‚Üí Œì ‚ä¢ f ‚âÖ f ‚à∑ x ‚¶Ç s) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ f‚â°f)
           (Œª {œÅ} [œÅ] ‚ä¢Œî [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ ‚Üí
              let [a]   = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ)) (PE.sym sF‚â°sF‚ÇÅ)
                                           ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                           ([F] [œÅ] ‚ä¢Œî)
                                           [a]‚ÇÅ
                  [b]   = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ)) (PE.sym sF‚â°sF‚ÇÅ)
                                           ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                           ([F] [œÅ] ‚ä¢Œî)
                                           [b]‚ÇÅ
                  [a‚â°b] = irrelevanceEqTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ)) (PE.sym sF‚â°sF‚ÇÅ)
                                             ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                             ([F] [œÅ] ‚ä¢Œî)
                                             [a‚â°b]‚ÇÅ
              in  irrelevanceEqTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift œÅ) G [ _ ]) G‚â°G‚ÇÅ) PE.refl
                                     ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                                     ([f] [œÅ] ‚ä¢Œî [a] [b] [a‚â°b]))
          (Œª {œÅ} [œÅ] ‚ä¢Œî [a]‚ÇÅ ‚Üí
             let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ)) (PE.sym sF‚â°sF‚ÇÅ)
                                        ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                        ([F] [œÅ] ‚ä¢Œî)
                                        [a]‚ÇÅ
             in  irrelevanceTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift œÅ) G [ _ ]) G‚â°G‚ÇÅ) PE.refl
                                  ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a]))
  irrelevanceTermT (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ)) t = t
  irrelevanceTermT (emb‚Å∞¬π x) t = irrelevanceTermT x t
  irrelevanceTermT (emb¬π‚Å∞ x) t = irrelevanceTermT x t

--------------------------------------------------------------------------------

  -- Irrelevance for term equality
  irrelevanceEqTerm : ‚àÄ {Œì A t u s l l‚Ä≤} (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s)
                    ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / q
  irrelevanceEqTerm p q t‚â°u = irrelevanceEqTermT (goodCasesRefl p q) t‚â°u

  -- Irrelevance for term equality with propositionally equal types
  irrelevanceEqTerm‚Ä≤ : ‚àÄ {Œì A A‚Ä≤ t u s s' l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤) (req : s PE.‚â° s')
                       (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s')
                     ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A‚Ä≤ ‚¶Ç s' / q
  irrelevanceEqTerm‚Ä≤ PE.refl PE.refl p q t‚â°u = irrelevanceEqTerm p q t‚â°u

  -- Irrelevance for term equality with propositionally equal types and terms
  irrelevanceEqTerm‚Ä≥ : ‚àÄ {Œì A A‚Ä≤ t t‚Ä≤ u u‚Ä≤ s l l‚Ä≤}
                        (eqt : t PE.‚â° t‚Ä≤) (equ : u PE.‚â° u‚Ä≤) (eqA : A PE.‚â° A‚Ä≤)
                        (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚¶Ç s)
                      ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚â° u‚Ä≤ ‚à∑ A‚Ä≤ ‚¶Ç s / q
  irrelevanceEqTerm‚Ä≥ PE.refl PE.refl PE.refl p q t‚â°u = irrelevanceEqTerm p q t‚â°u

  -- Helper for irrelevance of term equality using shape view
  irrelevanceEqTermT : ‚àÄ {Œì A t u s} {l l‚Ä≤} {p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s}
                           ‚Üí ShapeView Œì l l‚Ä≤ A A s s p q
                           ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / q
  irrelevanceEqTermT (‚Ñï·µ• D D‚Ä≤) t‚â°u = t‚â°u
  irrelevanceEqTermT (Empty·µ• D D‚Ä≤) t‚â°u = t‚â°u
  irrelevanceEqTermT (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú‚Çå k m d d‚Ä≤ nf)
                     with whrDet* (red D‚ÇÅ , ne neK‚ÇÅ) (red D , ne neK)
  irrelevanceEqTermT (ne (ne K D neK K‚â°K) (ne .K D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú‚Çå k m d d‚Ä≤ nf)
    | PE.refl = ne‚Çú‚Çå k m d d‚Ä≤ nf
  irrelevanceEqTermT {Œì} {t = t} {u = u} {s = s}
                     (cstr·µ• (cstr·µ£ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
                            (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [domK]‚ÇÅ [a]‚ÇÅ [Yi]‚ÇÅ))
                     (cstr‚Çú‚Çå k k' d d' k‚â°k' [k] [k'] [k‚â°k']) =
    let Ka‚â°K‚ÇÅa‚ÇÅ = whrDet* (red D , cstr‚Çô) (red D‚ÇÅ , cstr‚Çô)
        K‚â°K‚ÇÅ    = cstr-app-PE-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
        a‚â°a‚ÇÅ    = cstr-app-PE-arg-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
        cstrA   = (cstr·µ£‚Ä≤ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
        cstrB   = (cstr·µ£‚Ä≤ K‚ÇÅ KcodU‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [domK]‚ÇÅ [a]‚ÇÅ [Yi]‚ÇÅ)
    in
    cstr‚Çú‚Çå k k'
             (PE.subst (Œª x ‚Üí Œì ‚ä¢ t :‚áí*: k ‚à∑ x ‚¶Ç s) Ka‚â°K‚ÇÅa‚ÇÅ d)
             (PE.subst (Œª x ‚Üí Œì ‚ä¢ u :‚áí*: k' ‚à∑ x ‚¶Ç s) Ka‚â°K‚ÇÅa‚ÇÅ d')
             (PE.subst (Œª x ‚Üí Œì ‚ä¢ k ‚âÖ k' ‚à∑ x ‚¶Ç s) Ka‚â°K‚ÇÅa‚ÇÅ k‚â°k')
             (irrelevanceTerm cstrA cstrB [k])
             (irrelevanceTerm cstrA cstrB [k'])
             (PE.subst ([Cstr]-prop K‚ÇÅ Œì _ k k') a‚â°a‚ÇÅ
                       ([Cstr]-prop-ext K‚â°K‚ÇÅ (Œª ki kiK kiK' t t' d ‚Üí irrelevanceEqTerm ([Yi] ki kiK) ([Yi]‚ÇÅ ki kiK') d) [k‚â°k']))
  irrelevanceEqTermT {Œì} {t = t} {u = u} {s = s}
                     (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                         (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
                     (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g]) =
    let Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ   = whrDet* (red D , Œ†‚Çô) (red D‚ÇÅ , Œ†‚Çô)
        F‚â°F‚ÇÅ , sF‚â°sF‚ÇÅ , G‚â°G‚ÇÅ = Œ†-PE-injectivity Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ
        [A]         = Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
        [A]‚ÇÅ        = Œ†·µ£‚Ä≤ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
    in  Œ†‚Çú‚Çå f g (PE.subst (Œª x ‚Üí Œì ‚ä¢ t :‚áí*: f ‚à∑ x ‚¶Ç s) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ u :‚áí*: g ‚à∑ x ‚¶Ç s) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ d‚Ä≤) funcF funcG
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ f ‚âÖ g ‚à∑ x ‚¶Ç s) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ f‚â°g)
            (irrelevanceTerm [A] [A]‚ÇÅ [f]) (irrelevanceTerm [A] [A]‚ÇÅ [g])
            (Œª {œÅ} [œÅ] ‚ä¢Œî [a]‚ÇÅ ‚Üí
               let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ)) (PE.sym sF‚â°sF‚ÇÅ)
                                          ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                                          ([F] [œÅ] ‚ä¢Œî)
                                          [a]‚ÇÅ
               in  irrelevanceEqTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift œÅ) G [ _ ]) G‚â°G‚ÇÅ) PE.refl
                                     ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([f‚â°g] [œÅ] ‚ä¢Œî [a]))
  irrelevanceEqTermT (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ)) t‚â°u = t‚â°u
  irrelevanceEqTermT (emb‚Å∞¬π x) t‚â°u = irrelevanceEqTermT x t‚â°u
  irrelevanceEqTermT (emb¬π‚Å∞ x) t‚â°u = irrelevanceEqTermT x t‚â°u
