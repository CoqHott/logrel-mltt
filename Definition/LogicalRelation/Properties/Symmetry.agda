{-# OPTIONS --without-K  #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Properties.Symmetry {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped
open import Definition.Typed
open import Definition.Typed.Properties
open import Definition.LogicalRelation
open import Definition.LogicalRelation.ShapeView
open import Definition.LogicalRelation.Irrelevance
open import Definition.LogicalRelation.Properties.Conversion

open import Tools.Product
import Tools.PropositionalEquality as PE

symNeutralTerm : ‚àÄ {t u A s Œì}
              ‚Üí Œì ‚ä©neNf t ‚â° u ‚à∑ A ‚¶Ç s
              ‚Üí Œì ‚ä©neNf u ‚â° t ‚à∑ A ‚¶Ç s
symNeutralTerm (neNf‚Çú‚Çå neK neM k‚â°m) = neNf‚Çú‚Çå neM neK (~-sym k‚â°m)

symNatural-prop : ‚àÄ {Œì k k‚Ä≤}
                ‚Üí [Natural]-prop Œì k k‚Ä≤
                ‚Üí [Natural]-prop Œì k‚Ä≤ k
symNatural-prop (suc·µ£ (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop)) =
  suc·µ£ (‚Ñï‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symNatural-prop prop))
symNatural-prop zero·µ£ = zero·µ£
symNatural-prop (ne prop) = ne (symNeutralTerm prop)

symEmpty-prop : ‚àÄ {Œì k k‚Ä≤}
                ‚Üí [Empty]-prop Œì k k‚Ä≤
                ‚Üí [Empty]-prop Œì k‚Ä≤ k
symEmpty-prop (ne prop) = ne (symNeutralTerm prop)

[Cstr]-prop-sym : ‚àÄ {K Œì Pi a s t t'}
                    (Pi-sym : ‚àÄ ki kiK t t' ‚Üí Pi ki kiK t t' ‚Üí Pi ki kiK t' t)
                    (d : [Cstr]-prop K Œì Pi a s t t')
                  ‚Üí [Cstr]-prop K Œì Pi a s t' t
[Cstr]-prop-sym Pi-sym (cstr·µ£ kK x) = cstr·µ£ kK (Pi-sym _ _ _ _ x)
[Cstr]-prop-sym Pi-sym (ne x) = ne (symNeutralTerm x)


[Box]-prop-sym : ‚àÄ {P Œì sF F b b'}
                   (P-sym : ‚àÄ b b' ‚Üí P b b' ‚Üí P b' b)
                   (d : [Box]-prop P Œì sF F b b')
                 ‚Üí [Box]-prop P Œì sF F b' b
[Box]-prop-sym P-sym (box·µ£ x) = box·µ£ (P-sym _ _ x)
[Box]-prop-sym P-sym (ne x) = ne (symNeutralTerm x)

mutual
  -- Helper function for symmetry of type equality using shape views.
  {-# TERMINATING #-}
  symEqT : ‚àÄ {Œì A B s l l‚Ä≤} {[A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s}
         ‚Üí ShapeView Œì l l‚Ä≤ A B s s [A] [B]
         ‚Üí Œì ‚ä©‚ü® l  ‚ü© A ‚â° B ‚¶Ç s / [A]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° A ‚¶Ç s / [B]
  symEqT (‚Ñï·µ• D D‚Ä≤) A‚â°B = red D
  symEqT (Empty·µ• D D‚Ä≤) A‚â°B = red D
  symEqT (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
         rewrite whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ) =
    ne‚Çå _ D neK
        (~-sym K‚â°M)
  symEqT {Œì} {s = s}
         (cstr·µ• (cstr·µ£ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
                (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [domK]‚ÇÅ [a]‚ÇÅ [Yi]‚ÇÅ))
         (cstr‚Çå a' D' A‚â°B [a‚â°a']) =
    let Ka‚â°K‚ÇÅa‚ÇÅ = PE.sym (whrDet* (red D‚ÇÅ , cstr‚Çô) (red D' , cstr‚Çô))
        K‚â°K‚ÇÅ    = cstr-app-PE-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
        a‚â°a‚ÇÅ    = cstr-app-PE-arg-injectivity Ka‚â°K‚ÇÅa‚ÇÅ
    in cstr‚Çå a
            (PE.subst (Œª k ‚Üí Œì ‚ä¢ _ :‚áí*: cstr k ‚àò a ‚¶Ç s) K‚â°K‚ÇÅ D)
            (‚âÖ‚Çú-sym (PE.subst‚ÇÇ (Œª a' k ‚Üí Œì ‚ä¢ a ‚âÖ a' ‚à∑ wkAll Œì (cstr-dom k) ‚¶Ç _) a‚â°a‚ÇÅ K‚â°K‚ÇÅ A‚â°B))
            (symEqTerm [domK]‚ÇÅ
                       (PE.subst (Œª a' ‚Üí Œì ‚ä©‚ü® _ ‚ü© a ‚â° a' ‚à∑ _ ‚¶Ç _ / [domK]‚ÇÅ) a‚â°a‚ÇÅ
                                 (irrelevanceEqTerm‚Ä≤ (PE.cong (Œª k ‚Üí wk (empty-wk Œì) (cstr-dom k)) K‚â°K‚ÇÅ)
                                                     (PE.cong cstr-dom-sort K‚â°K‚ÇÅ)
                                                     [domK]
                                                     [domK]‚ÇÅ
                                                     [a‚â°a'])))
  symEqT {Œì} {A = A} {s = s}
         (Box·µ• (Box·µ£ F sF D ‚ä¢F A‚â°A [F])
               (Box·µ£ F' sF' D' ‚ä¢F' A‚â°A' [F]'))
         (Box‚Çå F'' D'' A‚â°B [F‚â°F']) =
    let BF''‚â°BF' = whrDet* (red D'' , Box‚Çô) (red D' , Box‚Çô)
        sF‚â°sF'   = Box-sort-inj BF''‚â°BF'
        F''‚â°F'   = Box-inj BF''‚â°BF'
    in Box‚Çå F (PE.subst (Œª s ‚Üí Œì ‚ä¢ A :‚áí*: Box s F ‚¶Ç ùï•y) sF‚â°sF' D)
              (‚âÖ-sym (PE.subst‚ÇÇ (Œª s G ‚Üí Œì ‚ä¢ Box s F ‚âÖ Box s G ‚¶Ç ùï•y) sF‚â°sF' F''‚â°F' A‚â°B))
              (symEq‚Ä≤ (PE.cong ‚Äº sF‚â°sF') [F] [F]' (PE.subst (Œª G ‚Üí Œì ‚ä©‚ü® _ ‚ü© F ‚â° G ‚¶Ç _ / [F]) F''‚â°F' [F‚â°F']))
  symEqT {Œì = Œì} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                     (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
         (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
    let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , sF‚ÇÅ‚â°sF‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = Œ†-PE-injectivity Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
        [F‚ÇÅ‚â°F] : ‚àÄ {Œî} {œÅ} [œÅ] ‚ä¢Œî ‚Üí _
        [F‚ÇÅ‚â°F] {Œî} {œÅ} [œÅ] ‚ä¢Œî =
          let œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ = PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤)
              [œÅF‚Ä≤] {œÅ} [œÅ] ‚ä¢Œî = PE.subst (Œª x ‚Üí Œî ‚ä©‚ü® _ ‚ü© wk œÅ x ‚¶Ç _) F‚ÇÅ‚â°F‚Ä≤ ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
          in  irrelevanceEq‚Ä≤ {Œî} (œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ) PE.refl
                             ([œÅF‚Ä≤] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî)
                             (symEq‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([œÅF‚Ä≤] [œÅ] ‚ä¢Œî)
                                    ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî))
    in  Œ†‚Çå _ _ (red (PE.subst _ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) D)) (PE.subst _ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) (‚âÖ-sym (PE.subst (Œª x ‚Üí Œì ‚ä¢ Œ† F ‚¶Ç sF ‚ñπ G ‚âÖ x ‚¶Ç s) (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) A‚â°B)))
          [F‚ÇÅ‚â°F]
          (Œª {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
               let œÅG‚Ä≤a‚â°œÅG‚ÇÅ‚Ä≤a = PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]) (PE.sym G‚ÇÅ‚â°G‚Ä≤)
                   [œÅG‚Ä≤a] = PE.subst (Œª x ‚Üí _ ‚ä©‚ü® _ ‚ü© wk (lift œÅ) x [ _ ] ‚¶Ç _) G‚ÇÅ‚â°G‚Ä≤
                                     ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a])
                   [a]‚ÇÅ = convTerm‚ÇÅ‚Ä≤ sF‚ÇÅ‚â°sF‚Ä≤ ([F]‚ÇÅ [œÅ] ‚ä¢Œî) ([F] [œÅ] ‚ä¢Œî) ([F‚ÇÅ‚â°F] [œÅ] ‚ä¢Œî) [a]
               in  irrelevanceEq‚Ä≤ œÅG‚Ä≤a‚â°œÅG‚ÇÅ‚Ä≤a PE.refl
                                  [œÅG‚Ä≤a]
                                  ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a])
                                  (symEq ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) [œÅG‚Ä≤a]
                                         ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)))
  symEqT (U·µ• (U·µ£ _ _ _) (U·µ£ _ _ _)) A‚â°B rewrite Univ-PE-injectivity A‚â°B = PE.refl
  symEqT (emb‚Å∞¬π x) A‚â°B = symEqT x A‚â°B
  symEqT (emb¬π‚Å∞ x) A‚â°B = symEqT x A‚â°B

  -- Symmetry of type equality.
  symEq : ‚àÄ {Œì A B s l l‚Ä≤} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s)
        ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / [A]
        ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° A ‚¶Ç s / [B]
  symEq [A] [B] A‚â°B = symEqT (goodCases [A] [B] A‚â°B) A‚â°B

  -- same but with PE
  symEq‚Ä≤ : ‚àÄ {Œì A B s s' l l‚Ä≤} (eq : s PE.‚â° s') ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s')
        ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / [A]
        ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° A ‚¶Ç s' / [B]
  symEq‚Ä≤ PE.refl [A] [B] A‚â°B = symEq [A] [B] A‚â°B


  -- Symmetry of term equality.
  symEqTerm : ‚àÄ {l Œì A t u s} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s)
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚¶Ç s / [A]
  symEqTerm (U·µ£‚Ä≤ _ .‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [A] [B] [A‚â°B]) =
    U‚Çú‚Çå B A d‚Ä≤ d typeB typeA (‚âÖ‚Çú-sym A‚â°B) [B] [A] (symEq [A] [B] [A‚â°B])
  symEqTerm (‚Ñï·µ£ D) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
    ‚Ñï‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symNatural-prop prop)
  symEqTerm (Empty·µ£ D) (Empty‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
    Empty‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symEmpty-prop prop)
  symEqTerm (ne‚Ä≤ K D neK K‚â°K) (ne‚Çú‚Çå k m d d‚Ä≤ nf) =
    ne‚Çú‚Çå m k d‚Ä≤ d (symNeutralTerm nf)
  symEqTerm (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
            (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g]) =
    Œ†‚Çú‚Çå g f d‚Ä≤ d funcG funcF (‚âÖ‚Çú-sym f‚â°g) [g] [f]
        (Œª œÅ ‚ä¢Œî [a] ‚Üí symEqTerm ([G] œÅ ‚ä¢Œî [a]) ([f‚â°g] œÅ ‚ä¢Œî [a]))
  symEqTerm (cstr·µ£‚Ä≤ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
            (cstr‚Çú‚Çå k k' d d' k‚â°k' [k] [k'] [k‚â°k']) =
    cstr‚Çú‚Çå k' k d' d (‚âÖ‚Çú-sym k‚â°k') [k'] [k] ([Cstr]-prop-sym (Œª ki kiK t t' x ‚Üí symEqTerm ([Yi] ki kiK) x) [k‚â°k'])
  symEqTerm (Box·µ£‚Ä≤ F sF D ‚ä¢F A‚â°A [F])
            (box‚Çú‚Çå b b' d d' b‚â°b' [b] [b'] [b‚â°b']) =
    box‚Çú‚Çå b' b d' d (‚âÖ‚Çú-sym b‚â°b') [b'] [b] ([Box]-prop-sym (Œª b b' d ‚Üí symEqTerm [F] d) [b‚â°b'])
  symEqTerm (emb 0<1 x) t‚â°u = symEqTerm x t‚â°u
