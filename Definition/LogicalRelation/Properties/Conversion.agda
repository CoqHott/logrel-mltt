{-# OPTIONS --without-K  #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Properties.Conversion {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped
open import Definition.Typed
open import Definition.Typed.RedSteps
open import Definition.Typed.Properties
open import Definition.LogicalRelation
open import Definition.LogicalRelation.ShapeView
open import Definition.LogicalRelation.Irrelevance

open import Tools.Product
open import Tools.Empty
import Tools.PropositionalEquality as PE



mutual
  -- Helper function for conversion of terms converting from left to right.
  convTermT‚ÇÅ : ‚àÄ {l l‚Ä≤ Œì A B s t} {[A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s}
             ‚Üí ShapeView Œì l l‚Ä≤ A B s s [A] [B]
             ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
             ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A ‚¶Ç s / [A]
             ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B ‚¶Ç s / [B]
  convTermT‚ÇÅ (‚Ñï·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÅ (Empty·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÅ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
             (ne‚Çú k d (neNf‚Çú neK‚ÇÇ ‚ä¢k k‚â°k)) =
    let K‚â°K‚ÇÅ = PE.subst (Œª x ‚Üí _ ‚ä¢ _ ‚â° x ‚¶Ç _)
                        (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
                        (‚âÖ-eq (~-to-‚âÖ K‚â°M))
    in  ne‚Çú k (convRed:*: d K‚â°K‚ÇÅ)
            (neNf‚Çú neK‚ÇÇ (conv ‚ä¢k K‚â°K‚ÇÅ) (~-conv k‚â°k K‚â°K‚ÇÅ))
  convTermT‚ÇÅ {l = l} {l‚Ä≤} {Œì = Œì} {s = s} {t = t}
         (cstr·µ• (cstr·µ£ K KcodU [domK] [Yi] a D ‚ä¢a A‚â°A [a])
                (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [a]‚ÇÅ))
         (cstr‚Çå a' D' A‚â°B [a‚â°a'])
         d =
    extCstr.irrelevance aux-ext K‚â°K‚ÇÅ ‚ä¢Ka‚â°Ka‚ÇÅ d
    where
      Ka'‚â°K‚ÇÅa‚ÇÅ = PE.sym (whrDet* (red D‚ÇÅ , cstr‚Çô) (red D' , cstr‚Çô))
      K‚â°K‚ÇÅ    = cstr-app-PE-injectivity Ka'‚â°K‚ÇÅa‚ÇÅ
      a'‚â°a‚ÇÅ   = cstr-app-PE-arg-injectivity Ka'‚â°K‚ÇÅa‚ÇÅ
      ‚ä¢Ka‚â°Ka‚ÇÅ  = ‚âÖ-eq (‚âÖ-cstr-cong KcodU (PE.subst (Œª x ‚Üí Œì ‚ä¢ a ‚âÖ x ‚à∑ _ ‚¶Ç _) a'‚â°a‚ÇÅ A‚â°B))
      aux-ext : (ki : constructors) (kiK : [ K ]-cstr (cstr-cod ki)) (kiK' : [ K‚ÇÅ ]-cstr (cstr-cod ki)) (t : Term) ‚Üí
                LogRel.cstr-arg-dispatch l (logRelRec l) Œì s K [domK] [Yi] ki kiK t ‚Üí
                LogRel.cstr-arg-dispatch l‚Ä≤ (logRelRec l‚Ä≤) Œì s K‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ ki kiK' t
      aux-ext ki kiK kiK' t d with [Yi] ki kiK with [Yi]‚ÇÅ ki kiK'
      ... | LogRel.cst·µ£ n [A] | LogRel.cst·µ£ n‚ÇÅ [A]‚ÇÅ = irrelevanceTerm [A] [A]‚ÇÅ d
      ... | LogRel.cst·µ£ n [A] | LogRel.mon·µ£ d‚ÇÅ x = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) (PE.sym K‚â°K‚ÇÅ) d‚ÇÅ))
      ... | LogRel.mon·µ£ d _ | LogRel.cst·µ£ n x = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) K‚â°K‚ÇÅ d))
      ... | LogRel.mon·µ£ kidomK _ | LogRel.mon·µ£ kidomK‚ÇÅ _ =
        PE.subst (Œª t ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ cstr-dom-ctx Œì K‚ÇÅ ‚¶Ç cstr-dom-sort K‚ÇÅ / [domK]‚ÇÅ )
                 ([]-cstr-params-irr {kiK = kidomK} {kiK' = kidomK‚ÇÅ})
                 (irrelevanceTerm‚Ä≤ (PE.cong (cstr-dom-ctx Œì) K‚â°K‚ÇÅ) (PE.cong cstr-dom-sort K‚â°K‚ÇÅ) [domK] [domK]‚ÇÅ d)
  convTermT‚ÇÅ {Œì = Œì} {s = s} {t = t}
             (Box·µ• (Box·µ£ F sF D ‚ä¢F A‚â°A [F])
                   (Box·µ£ F' sF' D' ‚ä¢F' A‚â°A' [F]'))
             (Box‚Çå F'' D'' A‚â°B [F‚â°F'])
             (box‚Çú b d b‚â°b [b]) =
    let BF''‚â°BF' = whrDet* (red D'' , Box‚Çô) (red D' , Box‚Çô)
        sF‚â°sF' = Box-sort-inj BF''‚â°BF'
        F''‚â°F'   = Box-inj BF''‚â°BF'
        ‚ä¢BF‚â°BF'' = ‚âÖ-eq A‚â°B
    in box‚Çú b
         (PE.subst (Œª x ‚Üí Œì ‚ä¢ t :‚áí*: b ‚à∑ x ‚¶Ç ùï•y) BF''‚â°BF'
                    (convRed:*: d ‚ä¢BF‚â°BF''))
         (PE.subst (Œª x ‚Üí Œì ‚ä¢ b ‚âÖ b ‚à∑ x ‚¶Ç ùï•y) BF''‚â°BF'
                     (‚âÖ-conv b‚â°b ‚ä¢BF‚â°BF''))
         (Box-prop-ext (Œª x d ‚Üí convTerm‚ÇÅ‚Ä≤ (PE.cong ‚Äº sF‚â°sF') [F] [F]' (PE.subst (Œª G ‚Üí Œì ‚ä©‚ü® _ ‚ü© F ‚â° G ‚¶Ç ‚Äº sF / [F] ) F''‚â°F' [F‚â°F']) d)
                       sF‚â°sF'
                       (PE.subst (Œª BF ‚Üí Œì ‚ä¢ Box sF F ‚â° BF ‚¶Ç ùï•y) BF''‚â°BF' ‚ä¢BF‚â°BF'')
                       [b])
  convTermT‚ÇÅ {Œì = Œì} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                         (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
             (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
             (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
    let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , sF‚ÇÅ‚â°sF‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = Œ†-PE-injectivity Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì ‚ä¢ Œ† F ‚¶Ç sF ‚ñπ G ‚â° x ‚¶Ç s) (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤)
                             (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú f (convRed:*: d Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ) funcF (‚âÖ-conv f‚â°f Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
           (Œª {œÅ} [œÅ] ‚ä¢Œî [a] [b] [a‚â°b] ‚Üí
              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                                           ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
                  [a]‚ÇÅ = convTerm‚ÇÇ‚Ä≤ PE.refl (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
                  [b]‚ÇÅ = convTerm‚ÇÇ‚Ä≤ PE.refl (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [b]
                  [a‚â°b]‚ÇÅ = convEqTerm‚ÇÇ‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a‚â°b]
                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                                           ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                                           ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
              in  convEqTerm‚ÇÅ ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]) [G‚â°G‚ÇÅ]
                              ([f] [œÅ] ‚ä¢Œî [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ))
          (Œª {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
             let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                                          ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
                 [a]‚ÇÅ = convTerm‚ÇÇ‚Ä≤ PE.refl (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
                 [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
                                                   (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                                          ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                                          ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
             in  convTerm‚ÇÅ ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]) [G‚â°G‚ÇÅ] ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ))
  convTermT‚ÇÅ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ)) A‚â°B t rewrite Univ-PE-injectivity A‚â°B = t
  convTermT‚ÇÅ (emb‚Å∞¬π x) A‚â°B t = convTermT‚ÇÅ x A‚â°B t
  convTermT‚ÇÅ (emb¬π‚Å∞ x) A‚â°B t = convTermT‚ÇÅ x A‚â°B t

  -- Helper function for conversion of terms converting from right to left.
  convTermT‚ÇÇ : ‚àÄ {l l‚Ä≤ Œì A B s t} {[A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s}
           ‚Üí ShapeView Œì l l‚Ä≤ A B s s [A] [B]
           ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
           ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B ‚¶Ç s / [B]
           ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A ‚¶Ç s / [A]
  convTermT‚ÇÇ (‚Ñï·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÇ (Empty·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
             (ne‚Çú k d (neNf‚Çú neK‚ÇÇ ‚ä¢k k‚â°k)) =
    let K‚ÇÅ‚â°K = PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚â° _ ‚¶Ç _)
                        (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
                        (sym (‚âÖ-eq (~-to-‚âÖ K‚â°M)))
    in  ne‚Çú k (convRed:*: d K‚ÇÅ‚â°K)
            (neNf‚Çú neK‚ÇÇ (conv ‚ä¢k K‚ÇÅ‚â°K) (~-conv k‚â°k K‚ÇÅ‚â°K))
  convTermT‚ÇÇ {l = l} {l‚Ä≤} {Œì = Œì} {s = s} {t = t}
         (cstr·µ• (cstr·µ£ K KcodU [domK] [Yi] a D ‚ä¢a A‚â°A [a])
                (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [a]‚ÇÅ))
         (cstr‚Çå a' D' A‚â°B [a‚â°a'])
         d =
    extCstr.irrelevance aux-ext K‚ÇÅ‚â°K ‚ä¢K‚ÇÅa‚ÇÅ‚â°K‚ÇÅa d
    where
      K‚ÇÅa‚ÇÅ‚â°Ka' = whrDet* (red D‚ÇÅ , cstr‚Çô) (red D' , cstr‚Çô)
      K‚ÇÅ‚â°K    = cstr-app-PE-injectivity K‚ÇÅa‚ÇÅ‚â°Ka'
      a‚ÇÅ‚â°a'   = cstr-app-PE-arg-injectivity K‚ÇÅa‚ÇÅ‚â°Ka'
      ‚ä¢Ka'‚â°Ka  = ‚âÖ-eq (‚âÖ-cstr-cong KcodU (‚âÖ‚Çú-sym A‚â°B))
      ‚ä¢K‚ÇÅa‚ÇÅ‚â°K‚ÇÅa  = PE.subst‚ÇÇ (Œª k x ‚Üí Œì ‚ä¢ cstr k x ‚â° cstr k a ‚¶Ç s) (PE.sym K‚ÇÅ‚â°K) (PE.sym a‚ÇÅ‚â°a') ‚ä¢Ka'‚â°Ka
      aux-ext : (ki : constructors) (kiK : [ K‚ÇÅ ]-cstr (cstr-cod ki)) (kiK' : [ K ]-cstr (cstr-cod ki)) (t : Term) ‚Üí
              LogRel.cstr-arg-dispatch l‚Ä≤ (logRelRec l‚Ä≤) Œì s K‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ ki kiK t ‚Üí
              LogRel.cstr-arg-dispatch l (logRelRec l) Œì s K [domK] [Yi] ki kiK' t
      aux-ext ki kiK kiK' t d  with [Yi]‚ÇÅ ki kiK with [Yi] ki kiK'
      ... | LogRel.cst·µ£ _ [A]‚ÇÅ | LogRel.cst·µ£ _ [A] = irrelevanceTerm [A]‚ÇÅ [A] d
      ... | LogRel.cst·µ£ n _ | LogRel.mon·µ£ d _ = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) (PE.sym K‚ÇÅ‚â°K) d))
      ... | LogRel.mon·µ£ d _ | LogRel.cst·µ£ n x = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) K‚ÇÅ‚â°K d))
      ... | LogRel.mon·µ£ kidomK‚ÇÅ _ | LogRel.mon·µ£ kidomK _ =
        PE.subst (Œª t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ cstr-dom-ctx Œì K ‚¶Ç cstr-dom-sort K / [domK] )
                 ([]-cstr-params-irr {kiK = kidomK‚ÇÅ} {kiK' = kidomK})
                 (irrelevanceTerm‚Ä≤ (PE.cong (cstr-dom-ctx Œì) K‚ÇÅ‚â°K) (PE.cong cstr-dom-sort K‚ÇÅ‚â°K) [domK]‚ÇÅ [domK] d)
  convTermT‚ÇÇ {Œì = Œì} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                         (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
             (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
             (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
    let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , sF‚ÇÅ‚â°sF‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = Œ†-PE-injectivity Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì ‚ä¢ Œ† F ‚¶Ç sF ‚ñπ G ‚â° x ‚¶Ç s)
                             (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú f (convRed:*: d (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)) funcF (‚âÖ-conv f‚â°f (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
           (Œª {œÅ} [œÅ] ‚ä¢Œî [a] [b] [a‚â°b] ‚Üí
              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                                           ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
                  [a]‚ÇÅ = convTerm‚ÇÅ‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
                  [b]‚ÇÅ = convTerm‚ÇÅ‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [b]
                  [a‚â°b]‚ÇÅ = convEqTerm‚ÇÅ‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a‚â°b]
                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                                           ([G] [œÅ] ‚ä¢Œî [a])
                                           ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a])
              in  convEqTerm‚ÇÇ ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                              [G‚â°G‚ÇÅ] ([f] [œÅ] ‚ä¢Œî [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ))
           (Œª {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                                           ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
                  [a]‚ÇÅ = convTerm‚ÇÅ‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                                           ([G] [œÅ] ‚ä¢Œî [a])
                                           ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a])
              in  convTerm‚ÇÇ ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                            [G‚â°G‚ÇÅ] ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ))
  convTermT‚ÇÇ {Œì = Œì} {s = s} {t = t}
             (Box·µ• (Box·µ£ F sF D ‚ä¢F A‚â°A [F])
                   (Box·µ£ F' sF' D' ‚ä¢F' A‚â°A' [F]'))
             (Box‚Çå F'' D'' A‚â°B [F‚â°F'])
             (box‚Çú b d b‚â°b [b]) =
    let BF'‚â°BF'' = whrDet* (red D' , Box‚Çô) (red D'' , Box‚Çô)
        sF'‚â°sF = Box-sort-inj BF'‚â°BF''
        F'‚â°F''   = Box-inj BF'‚â°BF''
        ‚ä¢BF''‚â°BF = ‚âÖ-eq (‚âÖ-sym A‚â°B)
    in box‚Çú b
         (convRed:*: (PE.subst (Œª x ‚Üí Œì ‚ä¢ t :‚áí*: b ‚à∑ x ‚¶Ç ùï•y) BF'‚â°BF'' d)
                     ‚ä¢BF''‚â°BF)
         (‚âÖ-conv (PE.subst (Œª x ‚Üí Œì ‚ä¢ b ‚âÖ b ‚à∑ x ‚¶Ç ùï•y) BF'‚â°BF'' b‚â°b)
                  ‚ä¢BF''‚â°BF)
         (Box-prop-ext (Œª x d ‚Üí  convTerm‚ÇÇ‚Ä≤ F'‚â°F'' (PE.cong ‚Äº (PE.sym sF'‚â°sF)) [F] [F]' [F‚â°F'] d)
                       sF'‚â°sF
                       (PE.subst (Œª BF ‚Üí Œì ‚ä¢ BF ‚â° Box sF F ‚¶Ç ùï•y)
                                 (PE.sym BF'‚â°BF'')
                                 ‚ä¢BF''‚â°BF)
                       [b])

  convTermT‚ÇÇ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ)) A‚â°B t rewrite Univ-PE-injectivity A‚â°B = t
  convTermT‚ÇÇ (emb‚Å∞¬π x) A‚â°B t = convTermT‚ÇÇ x A‚â°B t
  convTermT‚ÇÇ (emb¬π‚Å∞ x) A‚â°B t = convTermT‚ÇÇ x A‚â°B t

  -- Conversion of terms converting from left to right.
  convTerm‚ÇÅ : ‚àÄ {Œì A B s t l l‚Ä≤} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s)
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B ‚¶Ç s / [B]
  convTerm‚ÇÅ [A] [B] A‚â°B t = convTermT‚ÇÅ (goodCases [A] [B] A‚â°B) A‚â°B t

  -- Conversion of terms converting from left to right. with PE
  convTerm‚ÇÅ‚Ä≤ : ‚àÄ {Œì A B s s' t l l‚Ä≤} (eq : s PE.‚â° s') ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s')
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B ‚¶Ç s' / [B]
  convTerm‚ÇÅ‚Ä≤ PE.refl [A] [B] A‚â°B t = convTerm‚ÇÅ [A] [B] A‚â°B t

  -- Conversion of terms converting from right to left.
  convTerm‚ÇÇ : ‚àÄ {Œì A B s t l l‚Ä≤} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s)
          ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
          ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B ‚¶Ç s / [B]
          ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A ‚¶Ç s / [A]
  convTerm‚ÇÇ [A] [B] A‚â°B t = convTermT‚ÇÇ (goodCases [A] [B] A‚â°B) A‚â°B t

  -- Conversion of terms converting from right to left
  -- with some propsitionally equal types.
  convTerm‚ÇÇ‚Ä≤ : ‚àÄ {Œì A s s' B B‚Ä≤ t l l‚Ä≤} ‚Üí B PE.‚â° B‚Ä≤ ‚Üí s PE.‚â° s'
          ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s')
          ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B‚Ä≤ ‚¶Ç s / [A]
          ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B ‚¶Ç s' / [B]
          ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A ‚¶Ç s / [A]
  convTerm‚ÇÇ‚Ä≤ PE.refl PE.refl [A] [B] A‚â°B t = convTerm‚ÇÇ [A] [B] A‚â°B t


  -- Helper function for conversion of term equality converting from left to right.
  convEqTermT‚ÇÅ : ‚àÄ {l l‚Ä≤ Œì A B s t u} {[A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s}
               ‚Üí ShapeView Œì l l‚Ä≤ A B s s [A] [B]
               ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
               ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A ‚¶Ç s / [A]
               ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚¶Ç s / [B]
  convEqTermT‚ÇÅ (‚Ñï·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÅ (Empty·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÅ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
               (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m)) =
    let K‚â°K‚ÇÅ = PE.subst (Œª x ‚Üí _ ‚ä¢ _ ‚â° x ‚¶Ç _)
                        (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
                        (‚âÖ-eq (~-to-‚âÖ K‚â°M))
    in  ne‚Çú‚Çå k m (convRed:*: d K‚â°K‚ÇÅ)
                 (convRed:*: d‚Ä≤ K‚â°K‚ÇÅ)
                 (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ (~-conv k‚â°m K‚â°K‚ÇÅ))
  convEqTermT‚ÇÅ {l = l} {l‚Ä≤} {Œì = Œì} {s = s} {t = t} {u = u}
         (cstr·µ• (cstr·µ£ K KcodU [domK] [Yi] a D ‚ä¢a A‚â°A [a])
                (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [a]‚ÇÅ))
         (cstr‚Çå a' D' A‚â°B [a‚â°a'])
         (cstr‚Çú‚Çå [k] [k'] d) =
    let cstrA   = (cstr·µ£‚Ä≤ K KcodU a D ‚ä¢a A‚â°A [domK] [a] [Yi])
        cstrB   = (cstr·µ£‚Ä≤ K‚ÇÅ KcodU‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [domK]‚ÇÅ [a]‚ÇÅ [Yi]‚ÇÅ)
        cstrA‚â°B = (cstr‚Çå a' D' A‚â°B [a‚â°a'])
    in
    cstr‚Çú‚Çå (convTerm‚ÇÅ cstrA cstrB cstrA‚â°B [k])
           (convTerm‚ÇÅ cstrA cstrB cstrA‚â°B [k'])
           (ext[Cstr].irrelevance aux-ext K‚â°K‚ÇÅ ‚ä¢Ka‚â°Ka‚ÇÅ d)
    where
      Ka'‚â°K‚ÇÅa‚ÇÅ = PE.sym (whrDet* (red D‚ÇÅ , cstr‚Çô) (red D' , cstr‚Çô))
      K‚â°K‚ÇÅ    = cstr-app-PE-injectivity Ka'‚â°K‚ÇÅa‚ÇÅ
      a'‚â°a‚ÇÅ   = cstr-app-PE-arg-injectivity Ka'‚â°K‚ÇÅa‚ÇÅ
      ‚ä¢Ka‚â°Ka‚ÇÅ = ‚âÖ-eq (‚âÖ-cstr-cong KcodU (PE.subst (Œª x ‚Üí Œì ‚ä¢ a ‚âÖ x ‚à∑ _ ‚¶Ç _) a'‚â°a‚ÇÅ A‚â°B))
      aux-ext : (ki : constructors) (kiK : [ K ]-cstr (cstr-cod ki)) (kiK' : [ K‚ÇÅ ]-cstr (cstr-cod ki)) (t t' : Term) ‚Üí
                LogRel.cstr‚â°-arg-dispatch l (logRelRec l) Œì s K [domK] [Yi] ki kiK t t' ‚Üí
                LogRel.cstr‚â°-arg-dispatch l‚Ä≤ (logRelRec l‚Ä≤) Œì s K‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ ki kiK' t t'
      aux-ext ki kiK kiK' t t' d with [Yi] ki kiK with [Yi]‚ÇÅ ki kiK'
      ... | LogRel.cst·µ£ n [A] | LogRel.cst·µ£ _ [A]‚ÇÅ = irrelevanceEqTerm [A] [A]‚ÇÅ d
      ... | LogRel.cst·µ£ n _ | LogRel.mon·µ£ d _ = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) (PE.sym K‚â°K‚ÇÅ) d))
      ... | LogRel.mon·µ£ d _ | LogRel.cst·µ£ n _ = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) K‚â°K‚ÇÅ d))
      ... | LogRel.mon·µ£ kidomK _ | LogRel.mon·µ£ kidomK‚ÇÅ _ =
        PE.subst (Œª t ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ cstr-dom-ctx Œì K‚ÇÅ ‚¶Ç cstr-dom-sort K‚ÇÅ / [domK]‚ÇÅ )
                 ([]-cstr-params-irr {kiK = kidomK} {kiK' = kidomK‚ÇÅ})
                 (irrelevanceTerm‚Ä≤ (PE.cong (cstr-dom-ctx Œì) K‚â°K‚ÇÅ) (PE.cong cstr-dom-sort K‚â°K‚ÇÅ) [domK] [domK]‚ÇÅ d)
  convEqTermT‚ÇÅ {Œì = Œì} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                           (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
               (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
               (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG t‚â°u [t] [u] [t‚â°u]) =
    let [A] = Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
        [B] = Œ†·µ£‚Ä≤ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
        [A‚â°B] = Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤ = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì ‚ä¢ Œ† F ‚¶Ç sF ‚ñπ G ‚â° x ‚¶Ç s)
                             (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú‚Çå f g (convRed:*: d Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ) (convRed:*: d‚Ä≤ Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
            funcF funcG (‚âÖ-conv t‚â°u Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
            (convTerm‚ÇÅ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÅ [A] [B] [A‚â°B] [u])
            (Œª {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
               let F‚ÇÅ‚â°F‚Ä≤ , sF‚ÇÅ‚â°sF‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = Œ†-PE-injectivity (whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô))
                   [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                                            ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
                   [a]‚ÇÅ = convTerm‚ÇÇ‚Ä≤ PE.refl (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                                            ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                                            ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
               in  convEqTerm‚ÇÅ ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a])
                               [G‚â°G‚ÇÅ] ([t‚â°u] [œÅ] ‚ä¢Œî [a]‚ÇÅ))
  convEqTermT‚ÇÅ {Œì = Œì} {s = s} {t = t} {u = u}
               (Box·µ• (Box·µ£ F sF D ‚ä¢F A‚â°A [F])
                     (Box·µ£ F' sF' D' ‚ä¢F' A‚â°A' [F]'))
               (Box‚Çå F'' D'' A‚â°B [F‚â°F'])
               (box‚Çú‚Çå b b' d d' b‚â°b' [b] [b'] [b‚â°b']) =
    let BF''‚â°BF' = whrDet* (red D'' , Box‚Çô) (red D' , Box‚Çô)
        sF‚â°sF' = Box-sort-inj BF''‚â°BF'
        F''‚â°F'   = Box-inj BF''‚â°BF'
        ‚ä¢BF‚â°BF'' = ‚âÖ-eq A‚â°B
        BoxA     = Box·µ£‚Ä≤ F sF D ‚ä¢F A‚â°A [F]
        BoxB     = Box·µ£‚Ä≤ F' sF' D' ‚ä¢F' A‚â°A' [F]'
        BoxAB    = Box‚Çå F'' D'' A‚â°B [F‚â°F']
    in box‚Çú‚Çå b b'
         (PE.subst (Œª BF ‚Üí Œì ‚ä¢ t :‚áí*: b ‚à∑ BF ‚¶Ç ùï•y) BF''‚â°BF'
          (convRed:*: d ‚ä¢BF‚â°BF''))
         (PE.subst (Œª BF ‚Üí Œì ‚ä¢ u :‚áí*: b' ‚à∑ BF ‚¶Ç ùï•y) BF''‚â°BF'
          (convRed:*: d' ‚ä¢BF‚â°BF''))
         (PE.subst (Œª BF ‚Üí Œì ‚ä¢ b ‚âÖ b' ‚à∑ BF ‚¶Ç ùï•y) BF''‚â°BF'
          (‚âÖ-conv b‚â°b' ‚ä¢BF‚â°BF''))
         (convTerm‚ÇÅ BoxA BoxB BoxAB [b])
         (convTerm‚ÇÅ BoxA BoxB BoxAB [b'])
         ([Box]-prop-ext
           (Œª x x' d ‚Üí convEqTerm‚ÇÅ‚Ä≤ (PE.cong ‚Äº sF‚â°sF') [F] [F]'
                                    (PE.subst (Œª G ‚Üí Œì ‚ä©‚ü® _ ‚ü© F ‚â° G ‚¶Ç _ / [F]) F''‚â°F' [F‚â°F']) d)
           sF‚â°sF' (PE.subst (Œª BF ‚Üí Œì ‚ä¢ Box sF F ‚â° BF ‚¶Ç ùï•y) BF''‚â°BF' ‚ä¢BF‚â°BF'') [b‚â°b'])
  convEqTermT‚ÇÅ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ)) A‚â°B t‚â°u rewrite Univ-PE-injectivity A‚â°B = t‚â°u
  convEqTermT‚ÇÅ (emb‚Å∞¬π x) A‚â°B t‚â°u = convEqTermT‚ÇÅ x A‚â°B t‚â°u
  convEqTermT‚ÇÅ (emb¬π‚Å∞ x) A‚â°B t‚â°u = convEqTermT‚ÇÅ x A‚â°B t‚â°u

  -- Helper function for conversion of term equality converting from right to left.
  convEqTermT‚ÇÇ : ‚àÄ {l l‚Ä≤ Œì A B t u s} {[A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s}
             ‚Üí ShapeView Œì l l‚Ä≤ A B s s [A] [B]
             ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
             ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚¶Ç s / [B]
             ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A ‚¶Ç s / [A]
  convEqTermT‚ÇÇ (‚Ñï·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÇ (Empty·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
               (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m)) =
    let K‚ÇÅ‚â°K = PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚â° _ ‚¶Ç _)
                        (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
                        (sym (‚âÖ-eq (~-to-‚âÖ K‚â°M)))
    in  ne‚Çú‚Çå k m (convRed:*: d K‚ÇÅ‚â°K) (convRed:*: d‚Ä≤ K‚ÇÅ‚â°K)
                 (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ (~-conv k‚â°m K‚ÇÅ‚â°K))
  convEqTermT‚ÇÇ {l = l} {l‚Ä≤} {Œì = Œì} {t = t} {u = u} {s = s}
         (cstr·µ• (cstr·µ£ K KcodU [domK] [Yi] a D ‚ä¢a A‚â°A [a])
                (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [a]‚ÇÅ))
         (cstr‚Çå a' D' A‚â°B [a‚â°a'])
         (cstr‚Çú‚Çå [k] [k'] d) =
    let cstrA   = (cstr·µ£ K KcodU [domK] [Yi] a D ‚ä¢a A‚â°A [a])
        cstrB   = (cstr·µ£ K‚ÇÅ KcodU‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ a‚ÇÅ D‚ÇÅ ‚ä¢a‚ÇÅ A‚â°A‚ÇÅ [a]‚ÇÅ)
        cstrA‚â°B = (cstr‚Çå a' D' A‚â°B [a‚â°a'])
    in
    cstr‚Çú‚Çå (convTermT‚ÇÇ (cstr·µ• cstrA cstrB) cstrA‚â°B [k])
           (convTermT‚ÇÇ (cstr·µ• cstrA cstrB) cstrA‚â°B [k'])
           (ext[Cstr].irrelevance aux-ext K‚ÇÅ‚â°K ‚ä¢K‚ÇÅa‚ÇÅ‚â°K‚ÇÅa d )
      where
        K‚ÇÅa‚ÇÅ‚â°Ka' = whrDet* (red D‚ÇÅ , cstr‚Çô) (red D' , cstr‚Çô)
        K‚ÇÅ‚â°K    = cstr-app-PE-injectivity K‚ÇÅa‚ÇÅ‚â°Ka'
        a‚ÇÅ‚â°a'   = cstr-app-PE-arg-injectivity K‚ÇÅa‚ÇÅ‚â°Ka'
        ‚ä¢Ka'‚â°Ka  = ‚âÖ-eq (‚âÖ-sym (‚âÖ-cstr-cong KcodU A‚â°B))
        ‚ä¢K‚ÇÅa‚ÇÅ‚â°K‚ÇÅa  = PE.subst‚ÇÇ (Œª k x ‚Üí Œì ‚ä¢ cstr k x ‚â° cstr k a ‚¶Ç s) (PE.sym K‚ÇÅ‚â°K) (PE.sym a‚ÇÅ‚â°a') ‚ä¢Ka'‚â°Ka
        aux-ext : (ki : constructors) (kiK : [ K‚ÇÅ ]-cstr (cstr-cod ki)) (kiK' : [ K ]-cstr (cstr-cod ki)) (t t' : Term) ‚Üí
                  LogRel.cstr‚â°-arg-dispatch l‚Ä≤ (logRelRec l‚Ä≤) Œì s K‚ÇÅ [domK]‚ÇÅ [Yi]‚ÇÅ ki kiK t t' ‚Üí
                  LogRel.cstr‚â°-arg-dispatch l (logRelRec l) Œì s K [domK] [Yi] ki kiK' t t'
        aux-ext ki kiK kiK' t t' d with [Yi]‚ÇÅ ki kiK with [Yi] ki kiK'
        ... | LogRel.cst·µ£ n [A]‚ÇÅ | LogRel.cst·µ£ _ [A] = irrelevanceEqTerm [A]‚ÇÅ [A] d
        ... | LogRel.cst·µ£ n _ | LogRel.mon·µ£ d _ = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) (PE.sym K‚ÇÅ‚â°K) d))
        ... | LogRel.mon·µ£ d _ | LogRel.cst·µ£ n _ = ‚ä•-elim (n (PE.subst (Œª k ‚Üí [ k ]-cstr _) K‚ÇÅ‚â°K d))
        ... | LogRel.mon·µ£ kidomK‚ÇÅ _ | LogRel.mon·µ£ kidomK _ =
          PE.subst (Œª t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ cstr-dom-ctx Œì K ‚¶Ç cstr-dom-sort K / [domK] )
                  ([]-cstr-params-irr {kiK = kidomK‚ÇÅ} {kiK' = kidomK})
                  (irrelevanceTerm‚Ä≤ (PE.cong (cstr-dom-ctx Œì) K‚ÇÅ‚â°K) (PE.cong cstr-dom-sort K‚ÇÅ‚â°K) [domK]‚ÇÅ [domK] d)
  convEqTermT‚ÇÇ {Œì = Œì} {s = s} (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                           (Œ†·µ£ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
               (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
               (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG t‚â°u [t] [u] [t‚â°u]) =
    let [A] = Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
        [B] = Œ†·µ£‚Ä≤ sF‚ÇÅ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
        [A‚â°B] = Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤ = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì ‚ä¢ Œ† F ‚¶Ç sF ‚ñπ G ‚â° x ‚¶Ç s)
                             (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú‚Çå f g (convRed:*: d (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)) (convRed:*: d‚Ä≤ (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
            funcF funcG (‚âÖ-conv t‚â°u (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
            (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
            (Œª {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
               let F‚ÇÅ‚â°F‚Ä≤ , sF‚ÇÅ‚â°sF‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = Œ†-PE-injectivity (whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô))
                   [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                                            ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
                   [a]‚ÇÅ = convTerm‚ÇÅ‚Ä≤ (PE.sym sF‚ÇÅ‚â°sF‚Ä≤) ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                                            ([G] [œÅ] ‚ä¢Œî [a])
                                            ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a])
               in  convEqTerm‚ÇÇ ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
                               [G‚â°G‚ÇÅ] ([t‚â°u] [œÅ] ‚ä¢Œî [a]‚ÇÅ))
  convEqTermT‚ÇÇ {Œì = Œì} {t = t} {u = u} {s = s}
               (Box·µ• (Box·µ£ F sF D ‚ä¢F A‚â°A [F])
                     (Box·µ£ F' sF' D' ‚ä¢F' A‚â°A' [F]'))
               (Box‚Çå F'' D'' A‚â°B [F‚â°F'])
               (box‚Çú‚Çå b b' d d' b‚â°b' [b] [b'] [b‚â°b']) =
    let BF''‚â°BF' = whrDet* (red D'' , Box‚Çô) (red D' , Box‚Çô)
        BF'‚â°BF'' = PE.sym BF''‚â°BF'
        sF‚â°sF'   = Box-sort-inj BF''‚â°BF'
        sF'‚â°sF   = PE.sym sF‚â°sF'
        F''‚â°F'   = Box-inj BF''‚â°BF'
        F'‚â°F''   = PE.sym F''‚â°F'
        ‚ä¢BF''‚â°BF = ‚âÖ-eq (‚âÖ-sym A‚â°B)
        BoxA     = Box·µ£‚Ä≤ F sF D ‚ä¢F A‚â°A [F]
        BoxB     = Box·µ£‚Ä≤ F' sF' D' ‚ä¢F' A‚â°A' [F]'
        BoxAB    = Box‚Çå F'' D'' A‚â°B [F‚â°F']
    in box‚Çú‚Çå b b'
         (convRed:*: (PE.subst (Œª BF ‚Üí Œì ‚ä¢ t :‚áí*: b ‚à∑ BF ‚¶Ç ùï•y) BF'‚â°BF'' d) ‚ä¢BF''‚â°BF)
         (convRed:*: (PE.subst (Œª BF ‚Üí Œì ‚ä¢ u :‚áí*: b' ‚à∑ BF ‚¶Ç ùï•y) BF'‚â°BF'' d') ‚ä¢BF''‚â°BF)
         (‚âÖ-conv (PE.subst (Œª BF ‚Üí Œì ‚ä¢ b ‚âÖ b' ‚à∑ BF ‚¶Ç ùï•y) BF'‚â°BF'' b‚â°b') ‚ä¢BF''‚â°BF)
         (convTerm‚ÇÇ BoxA BoxB BoxAB [b])
         (convTerm‚ÇÇ BoxA BoxB BoxAB [b'])
         ([Box]-prop-ext (Œª x x' d ‚Üí convEqTerm‚ÇÇ‚Ä≤ (PE.cong ‚Äº sF‚â°sF') [F] [F]' (PE.subst (Œª G ‚Üí Œì ‚ä©‚ü® _ ‚ü© F ‚â° G ‚¶Ç _ / [F]) F''‚â°F' [F‚â°F']) d)
           sF'‚â°sF (PE.subst (Œª BF ‚Üí Œì ‚ä¢ BF ‚â° Box sF F ‚¶Ç ùï•y) BF''‚â°BF' ‚ä¢BF''‚â°BF) [b‚â°b'])
  convEqTermT‚ÇÇ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ)) A‚â°B t‚â°u rewrite Univ-PE-injectivity A‚â°B = t‚â°u
  convEqTermT‚ÇÇ (emb‚Å∞¬π x) A‚â°B t‚â°u = convEqTermT‚ÇÇ x A‚â°B t‚â°u
  convEqTermT‚ÇÇ (emb¬π‚Å∞ x) A‚â°B t‚â°u = convEqTermT‚ÇÇ x A‚â°B t‚â°u

  -- Conversion of term equality converting from left to right.
  convEqTerm‚ÇÅ : ‚àÄ {l l‚Ä≤ Œì A B t u s} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s)
              ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
              ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A ‚¶Ç s / [A]
              ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚¶Ç s / [B]
  convEqTerm‚ÇÅ [A] [B] A‚â°B t‚â°u = convEqTermT‚ÇÅ (goodCases [A] [B] A‚â°B) A‚â°B t‚â°u

  -- Conversion of term equality converting from left to right. with PE
  convEqTerm‚ÇÅ‚Ä≤ : ‚àÄ {l l‚Ä≤ Œì A B t u s s'} (eq : s PE.‚â° s') ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s')
              ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
              ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A ‚¶Ç s / [A]
              ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚¶Ç s' / [B]
  convEqTerm‚ÇÅ‚Ä≤ PE.refl [A] [B] A‚â°B t‚â°u = convEqTerm‚ÇÅ [A] [B] A‚â°B t‚â°u

  -- Conversion of term equality converting from right to left.
  convEqTerm‚ÇÇ : ‚àÄ {l l‚Ä≤ Œì A B t u s} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s)
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚¶Ç s / [B]
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A ‚¶Ç s / [A]
  convEqTerm‚ÇÇ [A] [B] A‚â°B t‚â°u = convEqTermT‚ÇÇ (goodCases [A] [B] A‚â°B) A‚â°B t‚â°u

  -- Conversion of term equality converting from right to left with PE
  convEqTerm‚ÇÇ‚Ä≤ : ‚àÄ {l l‚Ä≤ Œì A B t u s s'} (eq : s PE.‚â° s') ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s')
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B ‚¶Ç s / [A]
            ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚¶Ç s' / [B]
            ‚Üí Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A ‚¶Ç s / [A]
  convEqTerm‚ÇÇ‚Ä≤ PE.refl [A] [B] A‚â°B t‚â°u = convEqTerm‚ÇÇ [A] [B] A‚â°B t‚â°u
