{-# OPTIONS --without-K  #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.ShapeView {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped
open import Definition.Typed
open import Definition.Typed.Properties
open import Definition.LogicalRelation
open import Definition.LogicalRelation.Properties.Escape
open import Definition.LogicalRelation.Properties.Reflexivity

open import Tools.Product
open import Tools.Empty using (‚ä•; ‚ä•-elim)
import Tools.PropositionalEquality as PE

-- Type for maybe embeddings of reducible types
data MaybeEmb (l : TypeLevel) (‚ä©‚ü®_‚ü© : TypeLevel ‚Üí Set) : Set where
  noemb : ‚ä©‚ü® l ‚ü© ‚Üí MaybeEmb l ‚ä©‚ü®_‚ü©
  emb   : ‚àÄ {l‚Ä≤} ‚Üí l‚Ä≤ < l ‚Üí MaybeEmb l‚Ä≤ ‚ä©‚ü®_‚ü© ‚Üí MaybeEmb l ‚ä©‚ü®_‚ü©

-- Specific reducible types with possible embedding

_‚ä©‚ü®_‚ü©U : (Œì : Con Term) (l : TypeLevel) ‚Üí Set
Œì ‚ä©‚ü® l ‚ü©U = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ä≤‚ü® l‚Ä≤ ‚ü©U)

_‚ä©‚ü®_‚ü©‚Ñï_ : (Œì : Con Term) (l : TypeLevel) (A : Term) ‚Üí Set
Œì ‚ä©‚ü® l ‚ü©‚Ñï A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ñï A)

_‚ä©‚ü®_‚ü©Empty_ : (Œì : Con Term) (l : TypeLevel) (A : Term) ‚Üí Set
Œì ‚ä©‚ü® l ‚ü©Empty A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©Empty A)

_‚ä©‚ü®_‚ü©ne_‚¶Ç_ : (Œì : Con Term) (l : TypeLevel) (A : Term) (s : ùïä) ‚Üí Set
Œì ‚ä©‚ü® l ‚ü©ne A ‚¶Ç s = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©ne A ‚¶Ç s)

_‚ä©‚ü®_‚ü©Œ†_‚¶Ç_ : (Œì : Con Term) (l : TypeLevel) (A : Term) ‚Üí ùïä ‚Üí Set
Œì ‚ä©‚ü® l ‚ü©Œ† A ‚¶Ç s = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ä≤‚ü® l‚Ä≤ ‚ü©Œ† A ‚¶Ç s)

-- Construct a general reducible type from a specific

U-intr : ‚àÄ {Œì s l} ‚Üí Œì ‚ä©‚ü® l ‚ü©U ‚Üí Œì ‚ä©‚ü® l ‚ü© Univ s ‚¶Ç ùï•y
U-intr (noemb x) = U·µ£ x
U-intr (emb 0<1 x) = emb 0<1 (U-intr x)

‚Ñï-intr : ‚àÄ {A Œì l} ‚Üí Œì ‚ä©‚ü® l ‚ü©‚Ñï A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç ùï•y
‚Ñï-intr (noemb x) = ‚Ñï·µ£ x
‚Ñï-intr (emb 0<1 x) = emb 0<1 (‚Ñï-intr x)

Empty-intr : ‚àÄ {A Œì l} ‚Üí Œì ‚ä©‚ü® l ‚ü©Empty A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç ùï•y
Empty-intr (noemb x) = Empty·µ£ x
Empty-intr (emb 0<1 x) = emb 0<1 (Empty-intr x)

ne-intr : ‚àÄ {A Œì s l} ‚Üí Œì ‚ä©‚ü® l ‚ü©ne A ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s
ne-intr (noemb x) = ne x
ne-intr (emb 0<1 x) = emb 0<1 (ne-intr x)

Œ†-intr : ‚àÄ {A Œì s l} ‚Üí Œì ‚ä©‚ü® l ‚ü©Œ† A ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s
Œ†-intr (noemb x) = Œ†·µ£ x
Œ†-intr (emb 0<1 x) = emb 0<1 (Œ†-intr x)

-- Construct a specific reducible type from a general with some criterion

U-elim : ‚àÄ {Œì s s' l} ‚Üí Œì ‚ä©‚ü® l ‚ü© Univ s ‚¶Ç s' ‚Üí Œì ‚ä©‚ü® l ‚ü©U
U-elim (U·µ£‚Ä≤ _ l‚Ä≤ l< ‚ä¢Œì) = noemb (U·µ£ l‚Ä≤ l< ‚ä¢Œì)
U-elim (‚Ñï·µ£ D) = ‚ä•-elim (U‚â¢‚Ñï (whnfRed* (red D) U‚Çô))
U-elim (Empty·µ£ D) = ‚ä•-elim (U‚â¢Empty (whnfRed* (red D) U‚Çô))
U-elim (ne‚Ä≤ K D neK K‚â°K) = ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
U-elim (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) = ‚ä•-elim (U‚â¢Œ† (whnfRed* (red D) U‚Çô))
U-elim (emb 0<1 x) with U-elim x
U-elim (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
U-elim (emb 0<1 x) | emb () x‚ÇÅ

‚Ñï-elim‚Ä≤ : ‚àÄ {A Œì s s' l} ‚Üí Œì ‚ä¢ A ‚áí* ‚Ñï ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s' ‚Üí Œì ‚ä©‚ü® l ‚ü©‚Ñï A
‚Ñï-elim‚Ä≤ D (U·µ£‚Ä≤ _ l‚Ä≤ l< ‚ä¢Œì) = ‚ä•-elim (U‚â¢‚Ñï (whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , ‚Ñï‚Çô)))
‚Ñï-elim‚Ä≤ D (‚Ñï·µ£ D‚Ä≤) = noemb D‚Ä≤
‚Ñï-elim‚Ä≤ D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , ne neK)))
‚Ñï-elim‚Ä≤ D (Œ†·µ£‚Ä≤ sF F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
  ‚ä•-elim (‚Ñï‚â¢Œ† (whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , Œ†‚Çô)))
‚Ñï-elim‚Ä≤ D (Empty·µ£ D‚Ä≤) =
  ‚ä•-elim (‚Ñï‚â¢Empty (whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , Empty‚Çô)))
‚Ñï-elim‚Ä≤ D (emb 0<1 x) with ‚Ñï-elim‚Ä≤ D x
‚Ñï-elim‚Ä≤ D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
‚Ñï-elim‚Ä≤ D (emb 0<1 x) | emb () x‚ÇÇ

‚Ñï-elim : ‚àÄ {Œì s l} ‚Üí Œì ‚ä©‚ü® l ‚ü© ‚Ñï ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü©‚Ñï ‚Ñï
‚Ñï-elim [‚Ñï] = ‚Ñï-elim‚Ä≤ (id (escape [‚Ñï])) [‚Ñï]

Empty-elim‚Ä≤ : ‚àÄ {A Œì s s' l} ‚Üí Œì ‚ä¢ A ‚áí* Empty ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s' ‚Üí Œì ‚ä©‚ü® l ‚ü©Empty A
Empty-elim‚Ä≤ D (U·µ£‚Ä≤ _ l‚Ä≤ l< ‚ä¢Œì) = ‚ä•-elim (U‚â¢Empty (whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , Empty‚Çô)))
Empty-elim‚Ä≤ D (Empty·µ£ D‚Ä≤) = noemb D‚Ä≤
Empty-elim‚Ä≤ D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (D , Empty‚Çô) (red D‚Ä≤ , ne neK)))
Empty-elim‚Ä≤ D (Œ†·µ£‚Ä≤ sF F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
  ‚ä•-elim (Empty‚â¢Œ† (whrDet* (D , Empty‚Çô) (red D‚Ä≤ , Œ†‚Çô)))
Empty-elim‚Ä≤ D (‚Ñï·µ£ D‚Ä≤) =
  ‚ä•-elim (Empty‚â¢‚Ñï (whrDet* (D , Empty‚Çô) (red D‚Ä≤ , ‚Ñï‚Çô)))
Empty-elim‚Ä≤ D (emb 0<1 x) with Empty-elim‚Ä≤ D x
Empty-elim‚Ä≤ D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
Empty-elim‚Ä≤ D (emb 0<1 x) | emb () x‚ÇÇ

Empty-elim : ‚àÄ {Œì l} ‚Üí Œì ‚ä©‚ü® l ‚ü© Empty ‚¶Ç ùï•y ‚Üí Œì ‚ä©‚ü® l ‚ü©Empty Empty
Empty-elim [Empty] = Empty-elim‚Ä≤ (id (escape [Empty])) [Empty]

ne-elim‚Ä≤ : ‚àÄ {A Œì l s s' K} ‚Üí Œì ‚ä¢ A ‚áí* K ‚¶Ç s ‚Üí Neutral K ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s' ‚Üí Œì ‚ä©‚ü® l ‚ü©ne A ‚¶Ç s'
ne-elim‚Ä≤ D neK (U·µ£‚Ä≤ _ l‚Ä≤ l< ‚ä¢Œì) =
  ‚ä•-elim (U‚â¢ne neK (whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (‚Ñï·µ£ D‚Ä≤) = ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (red D‚Ä≤ , ‚Ñï‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (Empty·µ£ D‚Ä≤) = ‚ä•-elim (Empty‚â¢ne neK (whrDet* (red D‚Ä≤ , Empty‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (ne‚Ä≤ K D‚Ä≤ neK‚Ä≤ K‚â°K) = noemb (ne K D‚Ä≤ neK‚Ä≤ K‚â°K)
ne-elim‚Ä≤ D neK (Œ†·µ£‚Ä≤ sF F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
  ‚ä•-elim (Œ†‚â¢ne neK (whrDet* (red D‚Ä≤ , Œ†‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (emb 0<1 x) with ne-elim‚Ä≤ D neK x
ne-elim‚Ä≤ D neK (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
ne-elim‚Ä≤ D neK (emb 0<1 x) | emb () x‚ÇÇ

ne-elim : ‚àÄ {Œì l s K} ‚Üí Neutral K  ‚Üí Œì ‚ä©‚ü® l ‚ü© K ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü©ne K ‚¶Ç s
ne-elim neK [K] = ne-elim‚Ä≤ (id (escape [K])) neK [K]

Œ†-elim‚Ä≤ : ‚àÄ {A Œì F G sF s s' l} ‚Üí Œì ‚ä¢ A ‚áí* Œ† F ‚¶Ç sF ‚ñπ G ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s' ‚Üí Œì ‚ä©‚ü® l ‚ü©Œ† A ‚¶Ç s'
Œ†-elim‚Ä≤ D (U·µ£‚Ä≤ _ l‚Ä≤ l< ‚ä¢Œì) = ‚ä•-elim (U‚â¢Œ† (whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , Œ†‚Çô)))
Œ†-elim‚Ä≤ D (‚Ñï·µ£ D‚Ä≤) = ‚ä•-elim (‚Ñï‚â¢Œ† (whrDet* (red D‚Ä≤ , ‚Ñï‚Çô) (D , Œ†‚Çô)))
Œ†-elim‚Ä≤ D (Empty·µ£ D‚Ä≤) = ‚ä•-elim (Empty‚â¢Œ† (whrDet* (red D‚Ä≤ , Empty‚Çô) (D , Œ†‚Çô)))
Œ†-elim‚Ä≤ D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (Œ†‚â¢ne neK (whrDet* (D , Œ†‚Çô) (red D‚Ä≤ , ne neK)))
Œ†-elim‚Ä≤ D (Œ†·µ£‚Ä≤ sF F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
  noemb (Œ†·µ£ sF F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
Œ†-elim‚Ä≤ D (emb 0<1 x) with Œ†-elim‚Ä≤ D x
Œ†-elim‚Ä≤ D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
Œ†-elim‚Ä≤ D (emb 0<1 x) | emb () x‚ÇÇ

Œ†-elim : ‚àÄ {Œì F G sF s l} ‚Üí Œì ‚ä©‚ü® l ‚ü© Œ† F ‚¶Ç sF ‚ñπ G ‚¶Ç s ‚Üí Œì ‚ä©‚ü® l ‚ü©Œ† Œ† F ‚¶Ç sF ‚ñπ G ‚¶Ç s
Œ†-elim [Œ†] = Œ†-elim‚Ä≤ (id (escape [Œ†])) [Œ†]

-- Extract a type and a level from a maybe embedding
extractMaybeEmb : ‚àÄ {l ‚ä©‚ü®_‚ü©} ‚Üí MaybeEmb l ‚ä©‚ü®_‚ü© ‚Üí ‚àÉ Œª l‚Ä≤ ‚Üí ‚ä©‚ü® l‚Ä≤ ‚ü©
extractMaybeEmb (noemb x) = _ , x
extractMaybeEmb (emb 0<1 x) = extractMaybeEmb x

-- A view for constructor equality of types where embeddings are ignored
data ShapeView Œì : ‚àÄ l l‚Ä≤ A B s s' (p : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s') ‚Üí Set where
  U·µ• : ‚àÄ {s s' l l‚Ä≤} UA UB ‚Üí ShapeView Œì l l‚Ä≤ (Univ s) (Univ s') ùï•y ùï•y (U·µ£ UA) (U·µ£ UB)
  ‚Ñï·µ• : ‚àÄ {A B l l‚Ä≤} ‚ÑïA ‚ÑïB ‚Üí ShapeView Œì l l‚Ä≤ A B ùï•y ùï•y (‚Ñï·µ£ ‚ÑïA) (‚Ñï·µ£ ‚ÑïB)
  Empty·µ• : ‚àÄ {A B l l‚Ä≤} EmptyA EmptyB ‚Üí ShapeView Œì l l‚Ä≤ A B ùï•y ùï•y (Empty·µ£ EmptyA) (Empty·µ£ EmptyB)
  ne  : ‚àÄ {A B s s' l l‚Ä≤} neA neB
      ‚Üí ShapeView Œì l l‚Ä≤ A B s s' (ne neA) (ne neB)
  Œ†·µ• : ‚àÄ {A B s s' l l‚Ä≤} Œ†A Œ†B
    ‚Üí ShapeView Œì l l‚Ä≤ A B s s' (Œ†·µ£ Œ†A) (Œ†·µ£ Œ†B)
  emb‚Å∞¬π : ‚àÄ {A B s s' l p q}
        ‚Üí ShapeView Œì ‚Å∞ l A B s s' p q
        ‚Üí ShapeView Œì ¬π l A B s s' (emb 0<1 p) q
  emb¬π‚Å∞ : ‚àÄ {A B s s' l p q}
        ‚Üí ShapeView Œì l ‚Å∞ A B s s' p q
        ‚Üí ShapeView Œì l ¬π A B s s' p (emb 0<1 q)

-- Construct an shape view from an equality
goodCases : ‚àÄ {l l‚Ä≤ Œì A B s s'} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚¶Ç s')
          ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚¶Ç s / [A] ‚Üí ShapeView Œì l l‚Ä≤ A B s s' [A] [B]
goodCases (U·µ£ UA) (U·µ£ UB) A‚â°B = U·µ• UA UB
goodCases (U·µ£‚Ä≤ _ _ _ ‚ä¢Œì) (‚Ñï·µ£ D) PE.refl = ‚ä•-elim (U‚â¢‚Ñï (whnfRed* (red D) U‚Çô))
goodCases (U·µ£‚Ä≤ _ _ _ ‚ä¢Œì) (Empty·µ£ D) PE.refl = ‚ä•-elim (U‚â¢Empty (whnfRed* (red D) U‚Çô))
goodCases (U·µ£‚Ä≤ _ _ _ ‚ä¢Œì) (ne‚Ä≤ K D neK K‚â°K) PE.refl = ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
goodCases (U·µ£‚Ä≤ _ _ _ ‚ä¢Œì) (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) PE.refl =
  ‚ä•-elim (U‚â¢Œ† (whnfRed* (red D) U‚Çô))
goodCases (‚Ñï·µ£ D) (U·µ£ ‚ä¢Œì) A‚â°B = ‚ä•-elim (U‚â¢‚Ñï (whnfRed* A‚â°B U‚Çô))
goodCases (‚Ñï·µ£ _) (Empty·µ£ D') D =
  ‚ä•-elim (‚Ñï‚â¢Empty (whrDet* (D , ‚Ñï‚Çô) (red D' , Empty‚Çô)))
goodCases (‚Ñï·µ£ ‚ÑïA) (‚Ñï·µ£ ‚ÑïB) A‚â°B = ‚Ñï·µ• ‚ÑïA ‚ÑïB
goodCases (‚Ñï·µ£ D) (ne‚Ä≤ K D‚ÇÅ neK K‚â°K) A‚â°B =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (A‚â°B , ‚Ñï‚Çô) (red D‚ÇÅ , ne neK)))
goodCases (‚Ñï·µ£ D) (Œ†·µ£‚Ä≤ sF F G D‚ÇÅ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) A‚â°B =
  ‚ä•-elim (‚Ñï‚â¢Œ† (whrDet* (A‚â°B , ‚Ñï‚Çô) (red D‚ÇÅ , Œ†‚Çô)))
goodCases (Empty·µ£ D) (U·µ£ ‚ä¢Œì) A‚â°B = ‚ä•-elim (U‚â¢Empty (whnfRed* A‚â°B U‚Çô))
goodCases (Empty·µ£ _) (‚Ñï·µ£ D') D =
  ‚ä•-elim (‚Ñï‚â¢Empty (whrDet* (red D' , ‚Ñï‚Çô) (D , Empty‚Çô)))
goodCases (Empty·µ£ EmptyA) (Empty·µ£ EmptyB) A‚â°B = Empty·µ• EmptyA EmptyB
goodCases (Empty·µ£ D) (ne‚Ä≤ K D‚ÇÅ neK K‚â°K) A‚â°B =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (A‚â°B , Empty‚Çô) (red D‚ÇÅ , ne neK)))
goodCases (Empty·µ£ D) (Œ†·µ£‚Ä≤ sF F G D‚ÇÅ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) A‚â°B =
  ‚ä•-elim (Empty‚â¢Œ† (whrDet* (A‚â°B , Empty‚Çô) (red D‚ÇÅ , Œ†‚Çô)))
goodCases (ne‚Ä≤ K D neK K‚â°K) (U·µ£ ‚ä¢Œì) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (U‚â¢ne neM (whnfRed* (red D‚Ä≤) U‚Çô))
goodCases (ne‚Ä≤ K D neK K‚â°K) (‚Ñï·µ£ D‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (‚Ñï‚â¢ne neM (whrDet* (red D‚ÇÅ , ‚Ñï‚Çô) (red D‚Ä≤ , ne neM)))
goodCases (ne‚Ä≤ K D neK K‚â°K) (Empty·µ£ D‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (Empty‚â¢ne neM (whrDet* (red D‚ÇÅ , Empty‚Çô) (red D‚Ä≤ , ne neM)))
goodCases (ne neA) (ne neB) A‚â°B = ne neA neB
goodCases (ne‚Ä≤ K D neK K‚â°K) (Œ†·µ£‚Ä≤ sF F G D‚ÇÅ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (Œ†‚â¢ne neM (whrDet* (red D‚ÇÅ , Œ†‚Çô) (red D‚Ä≤ , ne neM)))
goodCases (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (U·µ£ ‚ä¢Œì)
          (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (U‚â¢Œ† (whnfRed* D‚Ä≤ U‚Çô))
goodCases (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (‚Ñï·µ£ D‚ÇÅ)
          (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (‚Ñï‚â¢Œ† (whrDet* (red D‚ÇÅ , ‚Ñï‚Çô) (D‚Ä≤ , Œ†‚Çô)))
goodCases (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (Empty·µ£ D‚ÇÅ)
          (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (Empty‚â¢Œ† (whrDet* (red D‚ÇÅ , Empty‚Çô) (D‚Ä≤ , Œ†‚Çô)))
goodCases (Œ†·µ£‚Ä≤ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (ne‚Ä≤ K D‚ÇÅ neK K‚â°K)
          (Œ†‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (Œ†‚â¢ne neK (whrDet* (D‚Ä≤ , Œ†‚Çô) (red D‚ÇÅ , ne neK)))
goodCases (Œ†·µ£ Œ†A) (Œ†·µ£ Œ†B) A‚â°B = Œ†·µ• Œ†A Œ†B
goodCases {l} [A] (emb 0<1 x) A‚â°B =
  emb¬π‚Å∞ (goodCases {l} {‚Å∞} [A] x A‚â°B)
goodCases {l‚Ä≤ = l} (emb 0<1 x) [B] A‚â°B =
  emb‚Å∞¬π (goodCases {‚Å∞} {l} x [B] A‚â°B)

-- Construct an shape view between two derivations of the same type
goodCasesRefl : ‚àÄ {l l‚Ä≤ Œì A s s'} ([A] : Œì ‚ä©‚ü® l ‚ü© A ‚¶Ç s) ([A‚Ä≤] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚¶Ç s')
              ‚Üí ShapeView Œì l l‚Ä≤ A A s s' [A] [A‚Ä≤]
goodCasesRefl [A] [A‚Ä≤] = goodCases [A] [A‚Ä≤] (reflEq [A])


-- A view for constructor equality between three types
data ShapeView‚ÇÉ Œì : ‚àÄ l l‚Ä≤ l‚Ä≥ A B C s1 s2 s3
                 (p : Œì ‚ä©‚ü® l   ‚ü© A ‚¶Ç s1)
                 (q : Œì ‚ä©‚ü® l‚Ä≤  ‚ü© B ‚¶Ç s2)
                 (s : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© C ‚¶Ç s3) ‚Üí Set where
  U·µ• : ‚àÄ {l l‚Ä≤ l‚Ä≥ s1 s2 s3} UA UB UC ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ (Univ s1) (Univ s2) (Univ s3) ùï•y ùï•y ùï•y (U·µ£ UA) (U·µ£ UB) (U·µ£ UC)
  ‚Ñï·µ• : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} ‚ÑïA ‚ÑïB ‚ÑïC
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C ùï•y ùï•y ùï•y (‚Ñï·µ£ ‚ÑïA) (‚Ñï·µ£ ‚ÑïB) (‚Ñï·µ£ ‚ÑïC)
  Empty·µ• : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} EmptyA EmptyB EmptyC
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C ùï•y ùï•y ùï•y (Empty·µ£ EmptyA) (Empty·µ£ EmptyB) (Empty·µ£ EmptyC)
  ne  : ‚àÄ {A B C s1 s2 s3 l l‚Ä≤ l‚Ä≥} neA neB neC
      ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C s1 s2 s3 (ne neA) (ne neB) (ne neC)
  Œ†·µ• : ‚àÄ {A B C s1 s2 s3 l l‚Ä≤ l‚Ä≥} Œ†A Œ†B Œ†C
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C s1 s2 s3 (Œ†·µ£ Œ†A) (Œ†·µ£ Œ†B) (Œ†·µ£ Œ†C)
  emb‚Å∞¬π¬π : ‚àÄ {A B C l l‚Ä≤ s1 s2 s3 p q s}
         ‚Üí ShapeView‚ÇÉ Œì ‚Å∞ l l‚Ä≤ A B C s1 s2 s3 p q s
         ‚Üí ShapeView‚ÇÉ Œì ¬π l l‚Ä≤ A B C s1 s2 s3 (emb 0<1 p) q s
  emb¬π‚Å∞¬π : ‚àÄ {A B C l l‚Ä≤ s1 s2 s3  p q s}
         ‚Üí ShapeView‚ÇÉ Œì l ‚Å∞ l‚Ä≤ A B C s1 s2 s3 p q s
         ‚Üí ShapeView‚ÇÉ Œì l ¬π l‚Ä≤ A B C s1 s2 s3 p (emb 0<1 q) s
  emb¬π¬π‚Å∞ : ‚àÄ {A B C l l‚Ä≤ s1 s2 s3 p q s}
         ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ ‚Å∞ A B C s1 s2 s3 p q s
         ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ ¬π A B C s1 s2 s3 p q (emb 0<1 s)

-- Combines two two-way views into a three-way view
combine : ‚àÄ {Œì l l‚Ä≤ l‚Ä≥ l‚Ä¥ A B C s1 s2 r2' s3 [A] [B] [B]‚Ä≤ [C]}
        ‚Üí ShapeView Œì l l‚Ä≤ A B s1 s2 [A] [B]
        ‚Üí ShapeView Œì l‚Ä≥ l‚Ä¥ B C r2' s3 [B]‚Ä≤ [C]
        ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä¥ A B C s1 s2 s3 [A] [B] [C]
combine (U·µ• UA‚ÇÅ UB‚ÇÅ) (U·µ• UA UB) = U·µ• UA‚ÇÅ UB‚ÇÅ UB
combine (U·µ• UA UB) (‚Ñï·µ• ‚ÑïA ‚ÑïB) = ‚ä•-elim (U‚â¢‚Ñï (whnfRed* (red ‚ÑïA) U‚Çô))
combine (U·µ• UA UB) (Empty·µ• EmptyA EmptyB) = ‚ä•-elim (U‚â¢Empty (whnfRed* (red EmptyA) U‚Çô))
combine (U·µ• UA UB) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
combine (U·µ• UA UB) (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) Œ†B) =
  ‚ä•-elim (U‚â¢Œ† (whnfRed* (red D) U‚Çô))
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (U·µ• UA UB) = ‚ä•-elim (U‚â¢‚Ñï (whnfRed* (red ‚ÑïB) U‚Çô))
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (Empty·µ• EmptyA EmptyB) =
  ‚ä•-elim (‚Ñï‚â¢Empty (whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red EmptyA , Empty‚Çô)))
combine (‚Ñï·µ• ‚ÑïA‚ÇÅ ‚ÑïB‚ÇÅ) (‚Ñï·µ• ‚ÑïA ‚ÑïB) = ‚Ñï·µ• ‚ÑïA‚ÇÅ ‚ÑïB‚ÇÅ ‚ÑïB
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red D , ne neK)))
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) Œ†B) =
  ‚ä•-elim (‚Ñï‚â¢Œ† (whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red D , Œ†‚Çô)))
combine (Empty·µ• EmptyA EmptyB) (U·µ• UA UB) = ‚ä•-elim (U‚â¢Empty (whnfRed* (red EmptyB) U‚Çô))
combine (Empty·µ• EmptyA EmptyB) (‚Ñï·µ• ‚ÑïA ‚ÑïB) =
  ‚ä•-elim (Empty‚â¢‚Ñï (whrDet* (red EmptyB , Empty‚Çô) (red ‚ÑïA , ‚Ñï‚Çô)))
combine (Empty·µ• EmptyA‚ÇÅ EmptyB‚ÇÅ) (Empty·µ• EmptyA EmptyB) = Empty·µ• EmptyA‚ÇÅ EmptyB‚ÇÅ EmptyB
combine (Empty·µ• EmptyA EmptyB) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (red EmptyB , Empty‚Çô) (red D , ne neK)))
combine (Empty·µ• EmptyA EmptyB) (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) Œ†B) =
  ‚ä•-elim (Empty‚â¢Œ† (whrDet* (red EmptyB , Empty‚Çô) (red D , Œ†‚Çô)))
combine (ne neA (ne K D neK K‚â°K)) (U·µ• UA UB) =
  ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
combine (ne neA (ne K D neK K‚â°K)) (‚Ñï·µ• ‚ÑïA ‚ÑïB) =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (red ‚ÑïA , ‚Ñï‚Çô) (red D , ne neK)))
combine (ne neA (ne K D neK K‚â°K)) (Empty·µ• EmptyA EmptyB) =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (red EmptyA , Empty‚Çô) (red D , ne neK)))
combine (ne neA‚ÇÅ neB‚ÇÅ) (ne neA neB) = ne neA‚ÇÅ neB‚ÇÅ neB
combine (ne neA (ne K D‚ÇÅ neK K‚â°K)) (Œ†·µ• (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) Œ†B) =
  ‚ä•-elim (Œ†‚â¢ne neK (whrDet* (red D , Œ†‚Çô) (red D‚ÇÅ , ne neK)))
combine (Œ†·µ• Œ†A (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) (U·µ• UA UB) =
  ‚ä•-elim (U‚â¢Œ† (whnfRed* (red D) U‚Çô))
combine (Œ†·µ• Œ†A (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) (‚Ñï·µ• ‚ÑïA ‚ÑïB) =
  ‚ä•-elim (‚Ñï‚â¢Œ† (whrDet* (red ‚ÑïA , ‚Ñï‚Çô) (red D , Œ†‚Çô)))
combine (Œ†·µ• Œ†A (Œ†·µ£ sF F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) (Empty·µ• EmptyA EmptyB) =
  ‚ä•-elim (Empty‚â¢Œ† (whrDet* (red EmptyA , Empty‚Çô) (red D , Œ†‚Çô)))
combine (Œ†·µ• Œ†A (Œ†·µ£ sF F G D‚ÇÅ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (Œ†‚â¢ne neK (whrDet* (red D‚ÇÅ , Œ†‚Çô) (red D , ne neK)))
combine (Œ†·µ• Œ†A‚ÇÅ Œ†B‚ÇÅ) (Œ†·µ• Œ†A Œ†B) = Œ†·µ• Œ†A‚ÇÅ Œ†B‚ÇÅ Œ†B
combine (emb‚Å∞¬π [AB]) [BC] = emb‚Å∞¬π¬π (combine [AB] [BC])
combine (emb¬π‚Å∞ [AB]) [BC] = emb¬π‚Å∞¬π (combine [AB] [BC])
combine [AB] (emb‚Å∞¬π [BC]) = combine [AB] [BC]
combine [AB] (emb¬π‚Å∞ [BC]) = emb¬π¬π‚Å∞ (combine [AB] [BC])
